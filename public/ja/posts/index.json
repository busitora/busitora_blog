[{"content":"輪読会で読むことになったので、メモ\n1章 ユーザー数0から数百万人のスケールアップ トラフィックをさばくための説明が多い。\n非リレーショナルデータベース使うときはこんなとき データが構造化されたグループに限定されていない場合 柔軟性の高い機能を実行する必要がある場合 より多様な入力を行う必要がある場合 データへのアクセスをより迅速に提供できる場合 形状やサイズが柔軟であったり、将来的に変化する可能性のあるデータを保存する場合 データリレーションシップが表形式のプライマリキーと外部キーの形式にうまく収まらない場合 垂直スケーリングと水平スケーリング → 基本水平でロードバランサーよね。 データベースはマスターとスレーブ用意して、読み込みはスレーブで行おう キャッシュを使用する注意点 → 揮発性、有効期限、一貫性\nたしかに、キャッシュのキー重複すると書き換わるので注意せんとあかん 1章まとめ どうスケーリングするか\nWeb層はステートレスに保つ 状態データを外に出す 各階層で冗長性を確保する 可能な限りデータをキャッシュする キャッシュ有効期限 静的コンテンツをCDNでホスティング CDNフォールバック (CDNの故障をクライアントが検知し、オリジンにリソースをリクエストできる状態にする) シャーディングによるデータ層の拡張 セレブ問題 (= ホットスポット・キー問題）が発生する可能性がある 複数のDBサーバを跨ってシャーディングされるとJOINが難しい。一般的な回避策はDBの非正規化 システムの監視と自動化 2章 おおまかな見積もり 覚えておくべき概念\n2のべき乗 レイテンシ数値 (プログラマが知っておくべきレイテンシの数値\nでぐぐろう) メモリは早いが、ディスクは遅い 可能ならディスクのシークは避ける 単純な圧縮アルゴリズムは速い 可能であれば、インターネット送信前にデータを圧縮する データセンターは通常、異なる地域にあり、データセンターにデータを送るのに時間がかかる 可用性の数値 → SLA(稼働率)を 99.xxx％でできる限り100に近づける 例: Twitterの QPSのストレージ見積もり 前提条件\n月間アクティブユーザ数3億人 50%のユーザが毎日Twitterを利用 ユーザは1日平均2件のツイートを投稿 ツイートの10%はメディアを含む データは5年間保存 推定値 デイリーアクティブユーザ(DAU) → 3億人 * 50% = 1億5000万人 ツイートのQPS → 1億5000万 * 2ツイート/ 24時間 / 3600秒間 = ~3500 ピーク時のQPS → 2 * QPS = ~7000 平均的なツイートサイズ ツイートID → 64B テキスト → 140B メディア → 1MB メディアの保存量 → 1億5000万210%*1MB = 30TB/日 5年間のメディア保存量 →30TB * 365 * 5 = ~55PB メモ\nQPS、ピークQPS、ストレージ、キャッシュ、サーバー数 を計算しておくと面接で◯ 3章 システム設計の面接試のフレームワーク システム設計の利点は、問題解決の疑似体験ができること 協調性、重圧可での仕事ぶり、曖昧さを建設的に議論できるか がみられてる 視野の狭さ、過剰ながんこさ、オーバーエンジニアリングでトレードオフ考えないのは駄目 ステップ1: 問題を理解し、設計範囲を明確にする いきなり飛びつくのではなく、具体を明確に、ユーザー数、サービスのスケール、技術的課題、等聞く。\nステップ2: 高度な設計を提案し、賛同を得る 省略\nステップ3: 設計の深堀り 面接官の思考性にあわせて、深ぼる要素を選定する\n→ つまり、面接官を事前に調査できるとなおヨシ\nステップ4: まとめ やるべきこと → 前提を質問し、コミュニケーションとりながらすすめること\nやるべきでないこと → 一つに深ぼりすぎること、コミュニケーションをとらないこと。(大事なので2回)\n時間配分\nステップ1: 問題を理解し設計範囲を明確にする 3~10分 ステップ2: 高度な設計を提案し、賛同を得る 10~15分 ステップ3: 設計を深堀りする 10~25分 ステップ4: まとめる 3~5分 4章 レートリミッターの設計 複数リクエストがサーバー過負荷や、コスト増幅になる。また、攻撃にもなる。\nステップ1: 問題を理解し設計範囲を明確にする クライアントサイドなのか、サーバーサイドなのか? レートリミッターの発火条件は? IP/ユーザーID もしくは他の要件? システム規模は? 分散環境か? 制限されたユーザーに通知する必要ある? ステップ2: 高度な設計を提案し、賛同を得る レート制限を実装する時に重要なのは、サーバー側なのか、あらたなミドルウェアか?\n参考: レートリミッターのアルゴリズム\nいくつかあるが、トークンバケットとリーキーバケットの違いは頭にいれておこう。\nトークンバケット → リクエストが来るたびにバケットからトークンを取り、さらに処理します。トークンがない場合、リクエストはドロップされ、ユーザーは再試行する必要があります。\nリーキーバケット → キューを使用してレート制限を実装するシンプルで直感的な方法です。これは単純な先入れ先出しのキュー（FIFO）です。新しいリクエストがキューに追加され、新しいリクエストのスペースがない場合、それらは破棄（リーク）されます。\nステップ3: 設計の深堀り Redisを用いたレートリミッターの実装方法の話。\nやはりRedisは集中型データストアなので、複数のレートリミッターのためヨシ\nステップ4: まとめ システムアーキテクチャ、分散環境におけるレートリミッター、性能の改善化、監視について話してきたが、以下を言及できると更にいい\nハードウェアとソフトウェアのレートリミッター 異なるレベルでのレート制限 アプリケーションレイヤーの話だけだったが、IP等はまた別で考えてね レート制限を受けないようにする クライアントキャッシュでAPIを頻繁に叩かせない 例外から回復できるように、エラーハンドリングしっかりする 再発火ロジックに十分なバックオフタイムを追加する 感想 5章 コンシステントハッシュの設計 コンシステントハッシュの説明\n参考: コンシステントハッシュっていつ使うんだ？\n参考: シャーディングとコンシステントハッシュ法\n図の説明は省略\n5章まとめ サーバ追加、削除時に最小化したキーを再分配できる データが均等に分散されるため、水平スケーリングが容易 6章 キーバリューストアの設計 キーバリューストアのペアの値として、 文字列、リスト、オブジェクトが使用可能 ベクタークロック: 前のデータのバージョンを+1した上でログに残し、最終的にログには1バージョンにつき一つのデータしか有効にしない マークルツリー: 二つのトランザクションのハッシュ値二つをあわせたデータに対して、新たに一つのハッシュ値を計算するという操作を繰り返して完成するハッシュ値のツリー構造のことです。 分散型キーバリューストア 分散ハッシュテーブルとも呼ばれ、キーバリューのペアを分散して配置する。\nCAPの定理の理解が重要になる\nCAPの定理 → 一貫性、可用性 、および 分割耐性（CAPの「C」、「A」、「P」）という3つの望ましい特性のうち、2つだけを提供することができるというもの\nCP データベース: CP データベースは、可用性を犠牲にして一貫性とパーティション耐性を提供します。任意の 2 つのノード間でパーティションが発生すると、システムはパーティションが解決されるまで、一貫性のないノードをシャットダウンする (つまり、使用不可にする) 必要があります。\nAP データベース: AP データベースは、一貫性を犠牲にして可用性とパーティション耐性を提供します。パーティションが発生すると、すべてのノードは利用可能なままになりますが、パーティションの間違った端にあるノードは他のノードよりも古いバージョンのデータを返す可能性があります。(パーティションが解決されると、AP データベースは通常、ノードを再同期して、システム内のすべての不整合を修復します。)\nCA データベース: CA データベースは、すべてのノードにわたって一貫性と可用性を実現します。ただし、システム内の 2 つのノード間にパーティションがある場合はこれを行うことができないため、フォールト トレランスを提供できません。\n7章 分散システムにおけるユニークIDジェネレータの設計 もう一度 → システム設計の面接試験における最初のステップは、明確な質問をすること\nアプローチ方法↓ (長所と短所は省略)\nマルチマスターレプリケーション → データベースサーバの数に応じて、IDがインクリメントされる。 UUID → 128ビットなので、毎秒10億個のUUIDを100年間生成して、1回衝突する可能性が50% チケットサーバ → 単一のデータベースサーバで集中的にauto_increment を使う Twitterによるsnowflakeアプローチ → IDを異なるセクションでわけて構成する 符号ビット (1ビット) タイムスタンプ (41ビット) データセンターID (5ビット) マシンID (5ビット) シーケンス番号 (12ビット) 8章 URL短縮サービスの設計 おおまかな見積もり 301 → 恒久的な転送\n302 → 一時的な転送\nBASE62 → \u0026lsquo;A\u0026rsquo;～\u0026lsquo;Z\u0026rsquo;、\u0026lsquo;a\u0026rsquo;～\u0026lsquo;z\u0026rsquo;、\u0026lsquo;0\u0026rsquo;～\u0026lsquo;9\u0026rsquo;の62種類、64の場合は + と - が入る\n分析を重視する場合、クリック率やクリック元をより簡単に追跡できる302リダイレクトの方が適している。\n9章 Webクローラの設計 Web マイニング → ウェブサイトの構造やウェブ上のデータを利用して行うデータマイニングのことである。ウェブ上にあるデータやコンテンツ、テキスト情報から役立つ情報を抽出する処理のことで、掲示板やブログ、商品レビューの情報から意見・評判を抽出するシステム、SNSサイトやEコマースサイトからの人間や商品の関係性を抽出するシステム等が実用化されている。 Webクローラの基本的なアルゴリズムはシンプル↓\nURLが与えられたら、指定されたすべてのページをダウンロード これらのWebページから、URLを抽出する ダウンロードするURLのリストに新しいURLを追加する。1~3をループする。 だが、実際のWebクローラは複雑性が高い。\n良いクローラの特徴として、スケーラビリティ、ポライトネス、拡張性、堅牢性。\n詳細は割愛(再度読む)\n印象に残った点 あくまでも、システム設計の面接に解はなく、そこまでのプロセスが重要である レートリミッターのアルゴリズム興味深い 以前やった実装で、リリース重視したから retry の分数でごまかしたけど、リーキーバケットアルゴリズムで実装したらヨシだな ん〜5章のコンシステントハッシュ、一読したけどちんぷんかんぷんだった また読もう CAPの定理は、サービスによって、キーバリューストアの設計を変える必要がある。 6章だが、ネットワーク障害時には、データの正確性を重視してシステムを止める or 使えることを重視して、多少の値の不正確さを許容する 必要性がある。トレードオフ Twitterによるsnowflakeアプローチ。 複数構成で作成する方が、デバッグしやすくてよさそう 9章、クローラの設計のシステム面接ってなかなかないだろうが、設計の方法はぼんやりと理解した 前職でも、クローラしすぎて某サイトからアクセス制限返すようにされたっけ ","description":"システム設計の面接試験のメモ","id":2,"section":"posts","tags":["book"],"title":"システム設計の面接試験のメモ","uri":"http://localhost:1313/ja/posts/tech/2024/03/23/"},{"content":"そろそろ体系的に学ぶ必要のあるTypeScriptのメモ\nORELLYのTypeScriptを読むので、雑にメモしてく。\nタイトルごとに区分するが、特に何もなければ書かない(タイトルのみ)\n1章 イントロダクション 型安全性 → 型を使って、プログラムが不正なことをしないように防ぐこと\n2章 TypeScript全体像 TypeScriptが独特なのは、バイトコードへと直接コンパイルする代わりに、なんと JavaScriptコードへとコンパイルする\nTypeScriptコンパイラー(TSC)がよしなに抽象構文木(AST:abstract syntax tree)してくれる\n大抵型推論があるので、明示的にアノテーションしなくてもOKな場合も多い。\nコンパイル時にいチェックしてくれるのは神。\nJsだと実行時まで気づかない。。\n3章 型について 型アノテーション(type annotation:明示的な型の指定)\nanyはゴッドファーザー。\nunknownは推論はしない。型を比較はできる。\nもし、その特定の型としたことを想定したいのなら、typeof 等で分岐処理する必要がある\n1 2 3 4 5 let a: unknown = 30 let b = a === 123 let c = a + 10 if (typeof a === \u0026#39;number\u0026#39;) { let d = a + 10 // number } 明示的 → 実際に代入\n推論 → 型に予測してもらう\n基本的には推論でいい。\nリテラル型 → ただ1つの値を表し、それ以外の値は受け入れない型\nconstを使うと再代入ができないのでリテラル型になる\n1 2 3 4 5 6 let a = true // boolean var b = false // boolean const c = true // true let d: boolean = true // boolean let e: true = true // true let f: true = false // エラー TS2322: 型 \u0026#39;false\u0026#39; を型 \u0026#39;true\u0026#39; に // 割り当てることはできません。 オブジェクトリテラル型とインデックスシグネチャについてはまた復習する\n・オブジェクトリテラル({})は、オブジェクトの型を即席で定義するために用いられる。 ・インデックスシグネチャ([key: T]: U)は、オブジェクトが、複数のkey(型T)を含む可能性があり値はU型になることを示している。 3.2.9 型alias 型エイリアスを使うかどうかを決めるときには、ある値に名前を付けて独立した変数にするかどうかを決めるときと同様の判断に従う\n3.2.11 タプル 1 2 3 4 5 6 7 8 9 10 // [名前, 名字, 生まれ年]のタプル let b: [string, string, number] = [\u0026#39;malcolm\u0026#39;, \u0026#39;gladwell\u0026#39;, 1963] // 鉄道運賃の配列。方向によって異なる場合があります let trainFares: [number, number?][] = [ [3.75], [8.25, 7.70], [10.50] ] // これは次のものと同等です let moreTrainFares: ([number] | [number, number])[] = [ // ... ] タプル型は不均一なリストを安全にコード化するだけでなく、それが型付けするリストの長さを限定する。これらの機能により、\n従来のシンプルな配列よりもはるかに大きな安全が得られる\n3.2.12 null undefined void never undefinedは、あるものがまだ定義されていないことを意味し、nullは、値が欠如していることを意味します\n型 意味 null 値の欠如 void return文を持たない関数の戻り値 undefined 値がまだ割り当てられていない変数 never 決して戻ることのない関数の戻り値 4章 関数 4-1 関数の宣言と呼び出し JSの関数定義方法は5つある\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 function greet(name: string) { return \u0026#39;hello\u0026#39; + name } // 名前付き関数 let greet2 = function(name: string) { return \u0026#39;hello\u0026#39; + name } // 関数式 let greet3 = (name: string) =\u0026gt; { return \u0026#39;hello\u0026#39; + name } // アロー関数式 let greet4 = (name: string) =\u0026gt; \u0026#39;hello\u0026#39; + name // アロー関数式省略 let greet5 = new Function(\u0026#39;name\u0026#39;, \u0026#39;return \u0026#34;hello \u0026#34; + name\u0026#39;) // 関数コンストラクタ (使っちゃ駄目) 4.1.1 オプションパラメータとデフォルトパラメータ オプションパラメータ → userId?\nデフォルトパラメータ → userId = \u0026ldquo;not assigned in\u0026rdquo;\nデフォルトパラメータを使うほうがよさげ\n4.1.2 レストパラメータ 可変長引数のこと\n\u0026hellip;numbers みたいなやつ\n4.1.3 call apply bind 呼び出し方のやつ。さらっとしか見てない。\nあんま使うイメージない\n4.1.4 thisの型付け 関数でthisを使う場合は、期待するthisの型を、最初のパラメータとして宣言すればいいっぽい\n4.1.5 ジェネレーター https://typescript-jp.gitbook.io/deep-dive/future-javascript/generators\n遅延評価?\nあまり使ったことなかった\n4.1.6 イテレーター イテレーターはジェネレータの裏返し。ジェネレーターが一連の値を生成するのに対し、イテレーターは\nそれを利用する。\n1 2 3 4 5 6 7 let numbers = { *[Symbol.iterator]() { for (let n = 1; n \u0026lt;= 10; n++) { yield n; } }, }; わからん。。\n4.1.7 呼び出しシグネチャ 1 2 3 4 5 6 7 type Log = (message: string, userId?: string) =\u0026gt; void let log: Log = ( message, userId = \u0026#39;Not signed in\u0026#39; ) =\u0026gt; { let time = new Date().toISOString() console.log(time, message, userId) } 4.1.8 文脈的型付 4.1.9 オーバーロードされた関数の型 後で読む\n4.2 ポリモーフィズム ジェネリクス型の話。\nここむずいんよなあぁ。\n【TypeScript】Generics(ジェネリックス)を理解する\n↑上記記事わかりやすい。\n要するに、関数の中でおなじ型が入るなら、 として とできるイメージか。\n4.2.3 ジェネリックの型推論 4.2.4 ジェネリック型エイリアス 4.2.5 制限付きポリモーフィズム 4.2.5.1 複数の制約を持つ制限付きポリモーフィズム ジェネリクスの部分は後で書く。\n4.3 型駆動開発 まず型シグネチャで概略を記述し、その後で値を埋め込むプログラミングのスタイル\n1 function map\u0026lt;T, U\u0026gt;(array: T[], f: (item: T) =\u0026gt; U): U[] これまでmapを見たことがなかったとしてもmapが何をするかについてある程度は直観的にわかるはずです。つまり、Tの配列と、Tから Uへとマッピングする関数を取り、Uの配列を返すということです。それを知るために、その関数の実装を見る必要はありません!\n↑ 直感的にまだ分かるようにはなっていないが、型の重要さは分かる。\n5章 クラスとインターフェイス チェスを例にオブジェクト指向\npublicとprivateはRubyにもあるので省略。\nprotected → このクラスとサブクラスのインスタンスからアクセス可能。\n5.2 super 5.3 戻り値の型としてthis を使用する 5.4 インターフェイス type と interface の違いは、\n1.型エイリアス(type)のほうが、右辺に任意の型を指定できるという点で、より汎用的である点\n1 2 type A = number type B = A | string 上記をインターフェイス型に変換することはできない\n2.インターフェースを拡張する場合に、TypeScriptは、拡張元のインターフェースが拡張先のインターフェースに割り当て可能かどうかを確認する点。\n1 2 3 4 5 6 7 8 9 10 interface A { good(x: number): string bad(x: number): string } interface B extends A { good(x: string | number): string bad(x: string): string } // Aは型エイリアスなので、型インターフェイスに拡張はできない 3.同じスコープ内に同じ名前のインターフェースが複数存在する場合、それらは自動的にマージされる点\n→ 宣言のマージ という\n5.4.1 宣言のマージ interfaceとtypeの違い、そして何を使うべきかについて\n↑ だと インターフェイス型を基本使うように公式も言っているらしい。現場によって異なるのか確認はしたほうがよさそう\n5.4.2 実装 クラスを宣言するときに implementsキーワードを使うと、そのクラスが特定のインターフェースを\n満たしていることを表現できる\n5.4.3 「インターフェースの実装」対「抽象クラスの拡張」 5.5 クラスは構造的に型付けされる 5.6 クラスは値と型の両方を宣言する TypeScript で表現できることの多くは、値か型の「どちらか」\n5.7 ポリモーフィズム 復習する\n5.8 ミックスイン ● 状態(すなわち、インスタンスプロパティ)を持つことができます。\n● 具象メソッド(抽象メソッドでないもの)だけを提供できます。\n● コンストラクターを持つことができます。コンストラクターは、クラスがミックスされた順序と同じ順序で呼び出されます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 type ClassConstructor\u0026lt;T\u0026gt; = new (...args: number[] | string[]) =\u0026gt; T; function withEZDebug\u0026lt;C extends ClassConstructor\u0026lt;{ getDebugValue(): object }\u0026gt;\u0026gt;(Class: C) { return class extends Class { debug() { let Name = this.constructor.name let value = this.getDebugValue() return Name + \u0026#39;(\u0026#39; + JSON.stringify(value) + \u0026#39;)\u0026#39; } } } class HardToDebugUser { constructor( private id: number, private firstName: string, private lastName: string ) {} getDebugValue() { return { id: this.id, name: this.firstName + \u0026#39; \u0026#39; + this.lastName } } } let User = withEZDebug(HardToDebugUser) let user = new User(3, \u0026#39;Emma\u0026#39;, \u0026#39;Gluzman\u0026#39;) console.log(user.debug()); ↑ Userはデバッグ出来るクラスを拡張したクラスを持っているからデバッグできる。むずいなここ。。\n5.9 デコレーター デコレーターはまだ実験的なものらしい。(2022/03)\nTypeScript のデコレーターがより成熟した機能になるまで、その使用は避け、代わりに通常の関数を 使用することをお勧めします。\nって書いてあったのでスルー\n5.10 final クラスをシュミレートする finalとは、クラスを拡張不可と指定したり、メソッドをオーバーライド不可と指定したりするために、いくつかの言語で使われるキーワード\nクラスを直接インスタンス化することも防止します。しかし、finalクラスに対して 私たちが望むのは、それを拡張できなくすることだけで、インスタンス化の機能は残しておく必要がある時につかう\n5.11 デザインパターン ファクトリー(Factory)パターンは、何らかの型のオブジェクトを作成するための方法で、どのよう\nな具体的なオブジェクトを作成すべきかの決定を、そのオブジェクトを作成する特定のファクトリー(工場の意)に任せます\nビルダー(Builder)パターンは、オブジェクトの構築と、そのオブジェクトを実際に実装する方法と\nを分離するためのもの\nコードは省略。\n6章 高度な型 6.1 型の間の関係 6.1.1 サブタイプとスーパータイプ サブタイプとは? → BがAのサブタイプなら、BはAの要求される型を安全に使える\n6.1.2 変性 パラメーター化された型(ジェネリック型)や複雑な型は、複雑になりがち\n6.1.2.1 形状の配列と変性 不変性(invariance) Tそのものを必要とする。\n共変性(covariance) \u0026lt;:Tであるものを必要とする。\n反変性(contravariance) \u0026gt;:Tであるものを必要とする。\n双変性(bivariance) \u0026lt;:Tまたは \u0026gt;:Tであれば OK。\n6.1.2.2 関数の変性 Crow \u0026lt; Bird \u0026lt; Animal で、変性を説明しているがテストコードがうまく動かず。。\n6.1.3 割当可能性 A \u0026lt;:Bである。 A が anyである。 であれば割当可能\n6.1.4 型の拡大 ミュータブルなら拡大され\nイミュータブルなら拡大されない\nnullまたは undefinedに初期化された変数は、anyに拡大される\n6.1.4.1 constアサーション TypeScript には特別なconstアサーションが用意されており、これを使うと、宣言と同時に型の拡大を抑えることができます。\n6.1.4.2 過剰プロパティチェック 6.1.5 型の絞り込み 6.2 完全性 1 2 3 4 5 6 type Weekday = \u0026#39;Mon\u0026#39; | \u0026#39;Tue\u0026#39;| \u0026#39;Wed\u0026#39; | \u0026#39;Thu\u0026#39; | \u0026#39;Fri\u0026#39; type Day = Weekday | \u0026#39;Sat\u0026#39; | \u0026#39;Sun\u0026#39; function getNextDay(w: Weekday): Day { switch (w) { case \u0026#39;Mon\u0026#39;: return \u0026#39;Tue\u0026#39; } } 上記を解決するのは Day | undefined にするか、 全部 case文で書くか\n6.3 高度なオブジェクト型 ルックアップ方式。← 定義済みの型[\u0026ldquo;キー\u0026rdquo;]と書くことで、指定したキーに対応する型を取り出すことができる\n6.3.1.2 keyof 演算子 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 type APIResponse = { user: { userId: string friendList: { count: number friends: { firstName: string lastName: string }[] } } } type ResponseKeys = keyof APIResponse // \u0026#39;user\u0026#39; type UserKeys = keyof APIResponse[\u0026#39;user\u0026#39;] // \u0026#39;userId\u0026#39; | \u0026#39;friendList\u0026#39; type FriendListKeys = keyof APIResponse[\u0026#39;user\u0026#39;][\u0026#39;friendList\u0026#39;] // \u0026#39;count\u0026#39; | \u0026#39;friends\u0026#39; 上記の keyofを使うと、こんな感じにできる\n1 2 3 4 5 6 7 8 9 function get\u0026lt; O extends object, K extends keyof O \u0026gt;( o: O, k: K ): O[K] { return o[k] } oの型が {a: number, b: string, c: boolean} である場合\nkeyof O は a/b/c K はnumber/string/boolean になる。\nので、型が違うとエラーになる\n6.3.2 レコード型 入れ子になっているものをすっきり書くやつ\nRecord\u0026lt;K,T\u0026gt;\n【TypeScript】「Record」型について\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 interface Person { name: string; age: number; } type members = \u0026#34;one\u0026#34; | \u0026#34;two\u0026#34; | \u0026#34;three\u0026#34; | \u0026#34;four\u0026#34;; const member:Record\u0026lt;members, Person\u0026gt; = { one: { name: \u0026#34;taro\u0026#34;, age: 12 }, two: { name: \u0026#34;hanako\u0026#34;, age: 15 }, three: { name: \u0026#34;saburo\u0026#34;, age: 18 }, four: { name: \u0026#34;siro\u0026#34;, age: 17 }, }; // const member:{ // one:Person, // two:Person, // three:Person, // four:Person, // } = { // one: { name:\u0026#39;taro\u0026#39;,age:12 }, // two: { name:\u0026#39;hanako\u0026#39;,age:15 }, // three: { name:\u0026#39;saburo\u0026#39;,age:18 }, // four: { name:\u0026#39;siro\u0026#39;,age:17 }, // } // ↑ 本来だったら、 type membersの 数値をこう書く。冗長 6.3.3 マップ型 後で復習\n6.3.4 コンパニオンオブジェクトパターン 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 type WeightUnit = \u0026#39;kg\u0026#39; | \u0026#39;g\u0026#39; export type Fish = { weightUnit: WeightUnit weightValue: number } export let Fish = { from(weightValue: number, weightUnit: WeightUnit): Fish { return { weightUnit, weightValue } } } 利用する側では、\n1 2 3 4 5 6 7 8 9 10 import { Fish } from \u0026#39;./Fish\u0026#39; // こっちのFishは型 let fish: Fish = { weightUnit: \u0026#39;kg\u0026#39;, weightValue: 100, } // こっちのFishは値 let otherFish = Fish.from(200, \u0026#39;g\u0026#39;) unit と value を importして指定出来る感じ。便利。\nプログラミングTypeScript 6章〜最後まで読んで\n6.4 関数にまつわる高度な型 1 2 3 4 5 6 7 8 9 function tuple\u0026lt;T extends unknown[]\u0026gt;( ...ts: T ): T { return ts } tuple([\u0026#34;aaa\u0026#34;]) console.log(tuple([\u0026#34;aaa\u0026#34;], [true],[1])) タプルで、可変長引数で表すとき上記のように書く。\nすげえ。でも配列で可変長引数で何でもOKにするパターンを想定してコードを書くのってどうなの？\n柔軟なんだよっていうことだけ頭にいれておこう\n6.4.2 ユーザー定義型ガード 1 2 3 4 5 6 7 8 9 10 11 12 function isString(a: unknown): a is string { return typeof a === \u0026#34;string\u0026#34;; } // function isString(a: unknown): boolean だと駄目 function parseInput(input: string | number) { let formattedInput: string if (isString(input)) { formattedInput = input.toUpperCase(); } } 6.5 条件型 1 2 3 4 5 type IsString\u0026lt;T\u0026gt; = T extends string ? true : false type A = IsString\u0026lt;string\u0026gt; // true type B = IsString\u0026lt;number\u0026gt; // false 型レベルの三項演算子。。最もユニークとかかれていたがイマイチぴんとこな。\n6.5.1 分配条件型 型定義に条件分岐を持ち込むことができる。\nT extends U ? A : B\n1 2 3 4 5 6 7 8 9 10 11 type ToArray2\u0026lt;T\u0026gt; = T extends unknown ? T[] : T[] type A = ToArray2\u0026lt;number\u0026gt; // number[] type B = ToArray2\u0026lt;number | string\u0026gt; // number[] | string[] type Without\u0026lt;T, U\u0026gt; = T extends U ? never : T; type C = Without\u0026lt; boolean | number | string, boolean \u0026gt; // number | string // Tには含まれているがUには含まれていない型を計算する 型の条件分岐。頭の片隅にいれておこう\nTypeScript の条件型（Conditional Type）と infer キーワード\n6.5.2 inder キーワード inferはその条件分岐で推論された型を指すときに用いることができます。\nジェネリック型を関数でいうところの引数(props)と呼ぶならば、\ninferは引数によって動的に値が変化する変数のようなもので、infer Uと記述したら、U型を型情報に含めることができます。\n【TypeScript】 inferに詳しくなろう\n6.5.3 組み込みの条件型 1 2 3 4 5 Exclude\u0026lt;T, U\u0026gt; // Tに含まれているが Uには含まれていない型を計算します。 Extract\u0026lt;T, U\u0026gt; // Tに含まれている型のうち、Uに割り当てることのできるものを計算します。 NonNullable\u0026lt;T\u0026gt; // nullと undefinedを除外した Tのバージョンを計算します。 ReturnType\u0026lt;F\u0026gt; // 関数の戻り値の型を計算します InstanceType\u0026lt;C\u0026gt; // クラスコンストラクターのインスタンス型を計算します。 6.6 エスケープハッチ 省略\n6.7 名前的型をシュミレートする 同じ string 様々な Idを定義していた時の引数を、Id別に関数化して代入できないようにするイメージ。\n6.8 プロトタイプを安全に拡張する 省略\n6.9 まとめ すべてのものを理解できていなかったり、覚えていなかったりしても、大丈夫です。何かをより安全 に表現する方法に苦労して取り組んでいるときに、この章に戻り、リファレンスとして活用してください。\nこの一行でだいぶ安心する。笑\n","description":"プログラミングTypeScriptのメモ","id":3,"section":"posts","tags":["typescript","oreilly"],"title":"プログラミングTypeScriptのメモ","uri":"http://localhost:1313/ja/posts/tech/2022/02/06/"},{"content":"RSpecの個人的に指針を書く\n","description":"RSpec指針","id":4,"section":"posts","tags":["rails","rspec"],"title":"RSpec指針","uri":"http://localhost:1313/ja/posts/tech/2022/02/01/"},{"content":"実務で、committeeを導入したので、その時のメモを書く。\n経緯と問題点 弊社のサービスAは、モノリスなRailsのアプリケーションであるが、その他社内サービス複数からAPIサーバとして使われているが、Swaggerに関して色々問題があった。\nSwaggerの明確な書き方がなく、エンジニアが既存コードを模倣して書いている 一つのymlファイルがアホほど大きくなり、可読性が悪い。 実際のSwaggerと実装が微妙に乖離している部分がある など、新しいAPIを生やすのはいいが、それを管理できずに、APIについての確認依頼が飛んできて、Aサービスのエンジニアと別部署の人間がコミュニケーションを取らざるを得なかった。\nそこで、名前だけ知っていたスキーマ駆動開発をググってみた所、committeeというgemを使うと良さそう。といった流れである。\ncommitteeの説明 沢山記事があるので詳細は割愛するが、committeeは下記。\ncommitteeは、実際のAPIリクエストやレスポンスがスキーマ定義にそっているかをチェックすることができるgemで、\n実際のAPIリクエストやレスポンスがスキーマ定義にそっているかをチェックすることができ、Rackのミドルウェアとして動作します\n公式gem を色々見るとだいたい分かる\ncommittee Rails ただ、committeeをRailsで使えるようにするのには、committee-railsが必要。\nよく使うメソッドはこれ。一応参考まで\n実際よくつかうのはこれ → assert_response_schema_confirm\n使い方 1 2 gem \u0026#34;committee\u0026#34; gem \u0026#34;committee-rails\u0026#34; をインストール。\nrails_helper.rb に、下記を追加。(pjによって Rails.root.join の後は変える必要がある)\n1 2 3 4 5 config.include Committee::Rails::Test::Methods #毎回各Specで includeするのは面倒なので config.add_setting :committee_options config.committee_options = { schema_path: Rails.root.join(\u0026#39;schema\u0026#39;, \u0026#39;schema.json\u0026#39;).to_s, parse_response_by_content_type: false # なくてもいいけどWarningが出ます # prefix: \u0026#34;/api/v1\u0026#34; ← とすると、yamlでapi/v1とかかなくていいので楽だが、ここはお好みで 2つのgemをいれることにより、assert_response_schema_confirm が使えるようになる。\nassert_response_schema_confirm は、書かれたドキュメントとレスポンスが一致してるかテストしてくれる代物。後述する。\n例 getするとuserのidとnameを返す routing 1 2 3 4 5 6 7 8 9 10 11 12 13 module Api def self.extended(router) # rubocop:disable Metrics/MethodLength router.instance_exec do namespace :api do namespace :v1 do get \u0026#34;swagger_sandbox\u0026#34;, to: \u0026#34;tests#sandbox\u0026#34; unless Rails.env. \u0026lt;!-- 説明のため適当 --\u0026gt; production? end end end end end controller getしたら適当にuserのidとnameを返すようにする\n1 2 3 4 5 class Api::V1::TestsController \u0026lt; Api::BaseController def sandbox render json: { user: { id: 1, name: \u0026#34;busitora\u0026#34; } }, status: :ok end end Spec 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 require \u0026#34;rails_helper\u0026#34; RSpec.describe Api::V1::TestsController, type: :request do describe \u0026#34;GET #sandbox\u0026#34; do subject { get(api_v1_swagger_sandbox_path, headers: { Authorization: \u0026#34;Token token=#{ENV[\u0026#34;API_TOKEN\u0026#34;]}\u0026#34; }) } before do subject end context \u0026#34;when success\u0026#34; do let(:return_http_status) { 200 } it \u0026#34;return expected status\u0026#34; do expect(response).to have_http_status(return_http_status) end it \u0026#34;return expected body schema\u0026#34; do assert_response_schema_confirm end end end end assert_response_schema_confirm が呼ばれた時に、rails_helper.rb で設定した\nschema_path: Rails.root.join(\u0026quot;swagger\u0026quot;, \u0026quot;openapi_sandbox.yaml\u0026quot;).to_s のファイルを読みに行く。\n今回は、 openapi_sandbox.yaml と設定した。\nyaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 openapi: 3.0.5 info: title: OpenAPIテスト version: 1.0.0 description: OpenAPIテスト servers: - url: http://localhost:3000 description: Local server - url: https://staging.test.tokyo description: Staging server paths: /api/v1/swagger_sandbox: get: summary: Get User description: ユーザー1件を取得 responses: \u0026#34;200\u0026#34;: description: ユーザー1件を取得 content: application/json: schema: type: object properties: user: $ref: \u0026#34;#/components/schemas/UserModel\u0026#34; components: schemas: UserModel: type: object required: - id - name properties: id: type: integer example: 1 description: primary id name: type: string example: busitora description: 名前 additionalProperties: false #これを追加すると、propertiesで許容してないのも弾く などと書く。イメージついただろうか。\n成功 APIの返り値とyamlの期待値があっている 上記yamlの書き方で、json: { user: { id: 1, name: “busitora” } } の期待値は、\nid とnameが必須であるという設定になる。\nこの段階でテストすると成功する\n失敗 yamlにrequiredを追加するが返り値に追加しない 1 render json: { user: { id: 1, name: \u0026#34;busitora\u0026#34; } }, status: :ok 1 2 3 4 required: - id - name - age #追加する 結果は下記\nCommittee::InvalidResponse: #/components/schemas/UserModel missing required parameters: age\n「yamlにはageがrequireになってるのに、追加されてないよ」と言ってくれる。\n返り値の型が違う時 1 render json: { user: { id: 1, name: \u0026#34;busitora\u0026#34;, age : \u0026#34;27\u0026#34; } } status: :ok integerなのにstringにした\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 required: - id - name - age properties: id: type: integer example: 1 description: primary id name: type: string example: busitora description: 名前 age: type: integer example: 27 description: 年齢 additionalProperties: false 結果は下記\nCommittee::InvalidResponse: #/components/schemas/UserModel/properties/age expected string, but received Integer: 27\n型はintergerだけど、stringでかえってきてるやんけエラー\n不要な値が入っている時(additionalProperties: false を外した時) 1 render json: { user: { id: 1, name: \u0026#34;busitora\u0026#34; , age: 27, address: \u0026#34;yokohama\u0026#34; } }, status: :ok 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 components: schemas: UserModel: type: object required: - id - name - age properties: id: type: integer example: 1 description: primary id name: type: string example: busitora description: 名前 age: type: integer example: 27 description: 年齢 # additionalProperties: false これは、不要なプロパティを許容するかどうか 結果は下記\nCommittee::InvalidResponse:#/components/schemas/UserModel does not define properties: address\nこのオプションはPJであわせておかないと大変なことになる。\nポイントや注意点 ControllerSpecだと、そもそも動かなかったのでRequestSpecで書く必要がある。\n弊社はContorollerSpecが多すぎて、そこを置き換えるがまず死ぬほどかかった。まだ残ってるのもある\nオブジェクトでモデルを返す時は、テスト対象で必須なカラムのみrequiredにするべき → DBのnull が許容されているカラムに関して、 nullable: true を死ぬほど書くことになる。\nそのフィールド、nullable にしますか、requiredにしますか\nresponseが 、 json: \u0026quot;\u0026quot; だとテスト出来ないので、destory以外はしっかりレスポンスで操作した対象を返すべき\nよく使う用語やオプション ・assert_response_schema_confirm → エンドポイントのjsonのレスポンスとschemaの整合性をチェック\n・ prefix: “/api”, → 任意指定できる\n・nullable: true → レスポンスにはあるが、nilのもの\n導入してみて yamlが正義になるのでSwagger関連のやり取りが減る API生やすときにレスポンスどうするか問題を統一できる specを強制的に書く習慣が生まれる(弊社はまだまだ強制はできてない) 全部は書けていないが、導入する価値はあったと思う。\n今後直したいこと jsonで返している値が、jbuilderだったり、レスポンスを200か204で返すかなど、まだルールが明確に決まっていないところがある。\nドキュメントのない、いわゆる化石コードのAPIを修正出来ずに、assert_schema_conform の型に合わせられず修正できていない部分がある\nまとめ これからAPIを開発する時は、\nSchemaに必要な情報を網羅する 開発 RequestSpec としたい。そうすることで、ドキュメントとコードの整合性が保たれると思う.\n参考 swaggerとopenapiの違い もともと Swagger という名前だったものが、 OpenAPIと名前を変えてバージョン3.0がリリースされました。\nSwaggerと聞けば馴染みのある方も多いと思います。\n基本的にSwaggerとOpenAPIを読み替えても問題はないのですが、（ドメインとか残ってるし =\u0026gt; https://swagger.io/specification/）\nSwaggerは2.xまでで、OpenAPIは3.0からになるので、Swaggerのバージョン3というものは厳密には存在しません。\nとのこと\n資料や動画 [JA] How to use OpenAPI3 for API developer / @ota42y\nRails + RSpec + OpenAPI3 + Committeeでスキーマ駆動開発を運用するTips\n一言 テスト書いてほしい。。。\nGraphQLってなにそれおいしいのなので調べてみたい\n","description":"Schema駆動開発","id":5,"section":"posts","tags":["rails","committee"],"title":"committeeを使ったSchema駆動開発","uri":"http://localhost:1313/ja/posts/tech/2022/01/22/"},{"content":"気になっていた。メタプロ。\n感想を書いていく。\nはじめに RubyやRuby on Railsを使いたい人は読むといいぽい\nメタプログラミングはLispからやってきたもの。\nI部では、\nメソッド検索、Rubyのクラス lambda スコープ Ⅱ部では、\nメタプログラミングのケーススタディ Ruby上級者向けの本ではないぽい\n第2章 2-1.オープンクラス メソッドが文字列でしか使われないと明確なため、Stringクラスに変更\n1 2 3 def to_alphanumeric gsub(/[^\\w\\s]/, \u0026#39;\u0026#39;) end 2-1.1 クラス定義の内部 Rubyのclassは、クラス宣言というよりスコープ演算子のようなもの。\nオープンクラスという。\nただStringとかを書き換えるモンキーパッチは危険そう。(感想)\n[Ruby] メタプログラミングの入り口、オープンクラスを理解する\n2.1.2 Monetizeの例 Monetizeというgemを利用してオープンクラスを確認した\n2.1.3 オープンクラスの問題点 replaceメソッドを定義しArrayクラスに寄せたが、すでにArrayにreplaceが元から生えているため、壊れる。モンキーパッチの悪い例\n2-2 オブジェクトモデルの構造 クラスやオブジェクトのクラスには見た目以上に隠されているものが多い\n2.2.1 オブジェクトの中身 同じメソッドでも、クラスに着目しているときはインスタンスメソッド で、 オブジェクトに着用しているときはメソッドと呼ぶ\n1 2 3 4 5 6 7 8 9 10 11 12 13 class MyClass def my_method @v = 1 end end obj = MyClass.new obj.my_method # obj は my_method というメソッドを持っていると言える # MyClass は my_method というメソッドを持っているのではなく、 # my_methodのインスタンスメソッドを持っていると言える # (メソッドを持っているというと、クラスメソッドとして使えるような文脈になる) 2.2.2 クラスの真相 クラスはオブジェクトである\n1 2 3 4 Array.superclass # Object Object.superclass # BasicObject すべてのクラスはModule\n1 2 Class.superclass # Module 2.2.3 定数 定数と変数の違いは、スコープ。\n2.2.4 オブジェクトとクラスのまとめ オブジェクトのメソッドは、オブジェクトではなくオブジェクトのクラスに住んでいて クラスのインスタンスメソッドと呼ばれる クラスとは、オブジェクトにインスタンスメソッドの一覧とスーパークラスへの リンクがついたものである ここらへんこんがらがるからまた読み返したい\n2.2.5 ネームスペースを使う Action Mailer には Text クラスがあるので、\n自前で Textクラスを実装することは出来ないが、moduleでラップすればいける\n2.4 メソッドを呼び出すときに何がおきているのか メソッドを探す時、Rubyは以下のことを行う\n1.メソッドを探す これはメソッド検索と呼ばれる\n2.メソッドを実行する これにはselfと呼ばれるものが必要\n2.4.1 メソッド探索 karnel は Objectから継承されており、printがどこでも使えるよねという説明\n2.4。2 メソッドの実行 メソッドはレシーバのオブジェクトに依存する\n2.4.3 Refinements https://docs.ruby-lang.org/ja/latest/method/Module/i/refine.html\n3からはrefine になったっぽい。\n2-6 まとめ 学んだことが羅列されている。\n2章はここだけ復習すればよさそう\nクラス、継承、インスタンス変数、メソッド、モジュール、レシーバ、あたり\nRubyのオブジェクトの実態など\n3章 メソッド 動的言語はコンパイラ時にエラーが出ない。\n3.2.1 メソッドを動的に呼び出す send を使うと得られるメリット → 動的ディスパッチ(コード実行時に呼び出すメソッドを決められる)\n1 2 3 4 5 6 7 8 9 10 [1] pry(main)\u0026gt; class MyClass [1] pry(main)* define_method :my_method do |my_args| [1] pry(main)* my_args * 3 [1] pry(main)* end [1] pry(main)* end =\u0026gt; :my_method [2] pry(main)\u0026gt; obj = MyClass.new =\u0026gt; #\u0026lt;MyClass:0x00007fe2feed0ba0\u0026gt; [3] pry(main)\u0026gt; obj.my_method(2) =\u0026gt; 6 上記の例だとmy_methodがメソッド名、my_argsが引数。\nmy_methodの箇所を変数に変えればメソッド名は自由自在。\nゴーストメソッド さらに「この名前で定義してね」とお願いするだけではなく「知らないメソッド名がきたらこの処理をしてね」ということもできる。\nmethod_missingをオーバーライドすることでメソッド名が存在しない場合の処理を記載できる。\nこれを使う場合、respond_to_missing?メソッドもオーバーライドしてゴーストメソッドがrespond_to?に正しい値を返すようにするのがルール。ただ暗黙のルールとなっているため動的メソッドで済む場合はそちらを使った方がバグが入ってきづらい。\n3.2.2 Pryの例 スパイダーマンのベンおじさんの 「大いなる力には、大いなる責任が伴う」がでてきて胸アツ\n例では send はprivateも呼び出せるから強力すぎるといったことを説明している\n3-6 まとめ 動的メソッドと動的ディスパッチ\nrepond_to? method_missing\nゴーストメソッド\nあたりの話。途中の 3-5あたりまでスキップ\n4章 ブロック 4.1.2 ブロックの基本 1 2 3 4 5 6 def a_method(a,b) a + yield(a,b) end a_method(1,2) {|x,y| (x + y) * 3 } # 10 メソッドはyieldを使ってブロックをコールバックする。\n4.5.1 proc と lambda Procはブロックをオブジェクトにしたもの\n1 2 3 inc = Proc.new { |x| x + 1 } inc.call(2) # 3 上記は遅延評価?\n\u0026amp;演算子と、procと、Object#method について理解しなおす\n\u0026amp;修飾は復習が必要そう\nProcをlambdaの明確な違い\n・return キーワードの意味が違う\n・引数に関するチェック\nProcの場合は、Procが定義されたscopeから戻る。\nlambdaの方が、引数の扱いに厳しい\nlamdbaでも同じように作れるがprocでよさそうと思っていたが、書籍ではlambda推しだった\nクラス定義\nモジュール定義\nメソッド\nという単位で切り替わる。\n4-8 まとめ スコープゲートとはなにか フラットスコープと共有スコープを使い、スコープを横断して束縛を見えるようにする オブジェクトのスコープで、コードを実行する方法や、クリーンルームでコードを実行する方法 ブロックとオブジェクトを相互に変換する方法 メソッドとオブジェクトを相互に変換する方法 呼出し可能オブジェクトの種類とその地以外 通常とのメソッドとの違い 独自の小さなDSLの書き方 正直この章むずかったので復習したい\n第5章 クラス定義 Rubyのクラス定義は、実際にコードを実行している\nこの章では、クラスマクロとアラウンドエイリアスを学ぶ。\nクラスマクロ attr_accsessorのようなキーワードに見えるクラスメソッドの事\n特異メソッド 特異クラス 【Ruby】特異メソッド・特異クラスを理解する\n1つのインスタンス固有のメソッドのことだけが使えるメソッドのこと\nオブジェクトの7つのルール オブジェクトは1種類のみ: 通常のオブジェクトかモジュールになる モジュールは1種類のみ: 通常のモジュールかクラス、特異クラスのいずれかになる メソッドは1種類のみ: モジュールに住んでいる 全てのオブジェクトは「本物のクラス」を持つ: 通常クラスか特異クラスのどちらか (BasicObject以外の)全てのクラスは1つの祖先を持つ: スーパークラスかモジュール オブジェクトの特異クラスのスーパークラスはオブジェクトのクラス、クラスの特異クラスのスーパークラスはクラスのスーパークラスの特異クラス メソッド探索はまず「本物のクラス」に向かって「右に」進み、その後継承チェーンを辿って「上に」進む クラスメソッドの構文 1 2 3 4 5 6 7 8 9 10 11 12 # その1 def MyClass.a_class_method; end # その2 class MyClass def self.another_class_method; end end # その3 class MyClass class \u0026lt;\u0026lt; self def yet_another_class_method; end end end 3番目の、特異クラスをオープンして、そこにメソッド 定義している\ninstance_eval nstance_evalは、オブジェクトの特異クラスにインスタンスメソッドを定義したり、そのオブジェクト自身が参照できるインスタンス変数を定義、または上書きしたりすることができる。\ninstance_evalとclass_evalについての備忘録\ninstance method Object#extend instance method Object#extend\nイマイチぴんときてない。。\n引数で指定したモジュールのインスタンスメソッドを self の特異メソッドとして追加します。 Module#include は、クラス(のインスタンス)に機能を追加しますが、extend は、ある特定のオブジェクトだけにモジュールの機能を追加したいときに使用します。 引数に複数のモジュールを指定した場合、最後の引数から逆順に extend を行います。 アラウンドエイリアス アラウンドエイリアスとは再定義したメソッドから以前のメソッドをエイリアスとして呼び出すことです。\n・元の処理の前後に処理を追加したり ・ラップした処理を作成したり ・既存機能を拡張しつつ、元のメソッドも利用可能にしたり と便利。\nしかし、既存処理を利用箇所がある場合は影響範囲の見極めが必要\n確かにStringやIntの元のメソッド変えると大変なことになるね\n1 2 3 4 5 6 7 8 9 class Integer # 既存の+をold_plusと定義します alias :old_plus :+ # +を新しく定義してやります # ここでは、常に4をプラスしてやります def +(value) self.old_plus(value).old_plus(4) end end ","description":"メタプログラミングRubyの感想と要約をします","id":6,"section":"posts","tags":["ruby","book"],"title":"メタプログラミングRuby","uri":"http://localhost:1313/ja/posts/tech/2021/12/29/"},{"content":"はじめに オブジェクト指向設計ガイド\nを会社で輪読会しているので、箇条書きでメモ\n概要まとめてくれてる記事はあるので、重複がないようにする\n1章 オブジェクト指向設計 オブジェクト指向設計とは、「依存関係を管理すること」であり、変更がかんたんになるように、どんなコード構成にするか。ということ\n実用的な設計は、アプリケーションに何が起こるかを予測するのではなく、将来、何かが起こることをただ認めるだけ。\n2章 単一責任のクラスを設計する TRUEなコードを書くために、単一責任の法則をクラスに定義する\nクラスに、「それと」や「または」といった風な説明ができてしまうとクラスの責務が一つ以上なのでよくない\n3章 依存関係を管理する ・オブジェクトが何かを知るオブジェクトを知る何かのオブジェクト、のようにチェーンするのはよくない。あくまで知りすぎてはいけない。\n・クラスが、他のクラスを知り過ぎるとよくない。なぜなら、そのクラスが密結合になり、汎用性がなくなる。更に、Aクラスを改修する時にBクラスにも影響が出て、修正がどんどん複雑化する(デメテルの法則の違反)。また、AクラスがBクラスしか操作しないといった意思にもなるため、クラスの汎用性にかける。\n・別メソッドに切り分けることで、他のメソッドの依存を減らす\n1 2 3 4 def wheel @wheel ||= Wheel.new(rim, tire) # 題材だとこう end ただ、疎結合にしすぎたらそれはそれで肥大化もするのか\u0026hellip;\n・引数の順番を指定するような initializeの書き方は、好ましくない、なぜなら、引数の順序を間違えた途端にバグるから。もし指定したいなら、ハッシュのargsの中に引数を全部埋め込み、merge や fetch を使って取得する\n・引数が多ければ、Wrapperモジュールみたいのを作ってそこでパラメータの引数だけ管理する感じにすると楽かも\n「クラス名を知っておく責任や、そのクラスに送るメソッドの名前を知っておく責任が、どこのほかのクラスに属するものではないかと疑える能力」\nっていう言葉、忘れないようにしよう\n4章 柔軟なインターフェイスをつくる 設計を検討し、パプリックインターフェイスを定義し、シーケンス図\nを使った章。\nデルメルの法則 → オブジェクトを疎結合にするためのコーディング規則の集まり\nメソッドチェーンになンになる hoge.fuga.piyo.piko みたいなのは許されない\n設計するときはメッセージに焦点を当てる\nメッセージをもとに適切なパブリックインターフェースを設計する\nSmalltalkで『オブジェクト指向設計実践ガイド』の「第4章 柔軟なインタフェースをつくる」を考える\n","description":"オブジェクト指向設計ガイド参考メモ","id":7,"section":"posts","tags":["ruby"],"title":"オブジェクト指向設計ガイド","uri":"http://localhost:1313/ja/posts/tech/2021/11/11/"},{"content":"はじめに AWSコンテナ設計・構築［本格］入門を読んで見る。\n1 コンテナの概要 1-1 コンテナの説明 メリット\n環境依存からの開放 環境構築やテストに関する時間の削減 リソース効率 1-2 Dockerとは コンテナのライフサイクルを管理するプラットフォーム\nDockerのイメージ/レジストリ/タグ/コンテナ の説明\n1-3 オーケストレータとは 複数のコンテナを動かす必要がある時に、コンテナ群を管理する必要がある。\nコンテナの配置管理 → どのコンテナが動いているかを見て判断 コンテナの負荷分散 → 処理量に応じて負荷を分散 コンテナの状態監視と自動復旧 → 異常時にコンテナを切離しい、自動復旧 コンテナのデプロイ → デプロイ時に、新旧のコンテナを入れ替える 1-4 コンテナ技術を導入する前に考慮すること ・コンテナ間の疎結合性や移植性を考慮した構成にする必要がある。\n・従来のオンプレで管理していた時の非機能要件をそのまま反映させるような構成にする必要がある\n2 コンテナ設計に必要なAWSの基礎知識 2-1 AWSが提供するコンテナサービス コントロールプレーン = コンテナを管理する機能\nECS → オーケストレーションサービスであり、コンテナを動かす実行環境のサービスではない\nTask → 1つ以上のコンテナなから構成されるアプリケーションの実行単位\nタスク定義 → JSONで記述する、タスク作成を定義するテンプレート。\nサービス → 指定した数だけタスクを維持するスケジューラー\nクラスター → ECSサービスとタスクを実行する論理グループ\nEKS → 省略\nEC2 → 省略\nFargate → コンテナ向けサーバーレスコンピューティングエンジン\nホスト管理から開放されるが、割高。\nECR → フルマネージドなコンテナレジストリ\n2-2 アーキテクチャの構成例 ECS on EC2\nECS on Fargate\nEKS on EC2\nEKS on Fargate\n3章 コンテナを利用したAWSアーキテクチャ Well-Architectedフレームワークの5つの柱についてまとめている。\nかなり量が多かったので全部書くのは断念。\np188のまとめを見つつ、振り返るのがよさそう。\n3-2 Well-Architectedフレームワークの活用 Well-Architectedフレームワークの5つの柱\n運用上の優秀性 セキュリティ 信頼性 パフォーマンス効率 コスト最適化 3-3 設計対象とするアーキテクチャ AWSのサービスの紹介のため割愛。\nこの本では、簡易的なWEBアプリケーションを作る。\nアイテム通知の一覧表z、お気に入り追加など。\nSSRでやる。\n3-4 運用設計 実際にハンズオンでやる内容をサービス含めて紹介している章\n運用上の優秀性\nどのようにシステムの状態を把握するか どのように不具合の修正を容易にするか どのようにデプロイのリスクを軽減するか モニタリングの目的は、システムの可用性を維持するために問題発生に気づくこと\n利用者の体験が損なわれるようなイベントを念頭に行うべき。\nメトリクスとは、定量的な指標として定期的に計測、収集されるシステム内部動作のデータ\n3~5 ~ 3~8 は割愛。まとめから、ハンズオンをやる時に振り返る。\n","description":"AWSの本のメモ","id":8,"section":"posts","tags":["aws"],"title":"[WIP]AWSコンテナ設計・構築 本格入門","uri":"http://localhost:1313/ja/posts/tech/2021/11/28/"},{"content":"はじめに サーバーレスの関数実行で便利とは聞いているが、実際に触ったことがないので、メモ(hello worldをconsole上レベル)\nAWS Lambda（イベント発生時にコードを実行）| AWS\n流れ 関数の作成 関数の作成でも、1から作成、設計図の使用、コンテナイメージ など色々ある模様。\n今回は概要を掴むため、設計図の使用 から hello-world-python でやってみる\nフィルタで調べて、「設定」をクリック\n基本的な情報 関数名を myfunctest とか適当に命名して、\n1.基本的な Lambda アクセス権限で新しいロールを作成 2.既存のロールを使用する 3.AWS ポリシーテンプレートから新しいロールを作成 1を選択し関数の選択をクリック\n少し時間かかるが作成され関数にリダイレクト\n関数の実行 実際のコードとかに\n1 2 3 4 5 6 7 8 9 10 11 12 13 import json print(\u0026#39;Loading function\u0026#39;) def lambda_handler(event, context): #print(\u0026#34;Received event: \u0026#34; + json.dumps(event, indent=2)) print(\u0026#34;value1 = \u0026#34; + event[\u0026#39;key1\u0026#39;]) print(\u0026#34;value2 = \u0026#34; + event[\u0026#39;key2\u0026#39;]) print(\u0026#34;value3 = \u0026#34; + event[\u0026#39;key3\u0026#39;]) print(\u0026#39;hello busitora\u0026#39;) # 足しただけ return event[\u0026#39;key1\u0026#39;] # Echo back the first key value #raise Exception(\u0026#39;Something went wrong\u0026#39;) 変更を加えて、Deploy後に、testをクリック\n結果に hello busitora が出てればOK\n感想 何かの処理にトリガーさせて、関数を実行みたいなことができる。\n便利そう。slackbotとか、たまにしか関数が実行されない処理とかで\nちょっと作りたいとかなら専ら便利か?\n色々試していきたい。\nAPI Gateway絡めて実際に使っていきたい。\nいつか実務で使うとなった時に、あ、進研ゼミでやったやつだ状態にしておきたいですね。\n自分用のブログだしこのレベル感でも許される。Qiitaなら許されなそう\n","description":"まじで触ってみて hello worldするだけのメモ","id":9,"section":"posts","tags":["aws"],"title":"Lambda触ってみる","uri":"http://localhost:1313/ja/posts/tech/2021/11/10/"},{"content":"タイトルの通り\n調べてみても、 古い記事が多かったので自分用にメモ。\nやりたいこと 「tables の column_b(int) に対して column_a(bool) を参照して一括で全部更新したい」\ncolumn_b はenumで使いたいためint。\ncolumn_a はboolだが、要件がboolで対応できなくなったため column_b をintで作り、\n既存処理を column_a から column_b に移したい\n一気に column_a を column_b に全部データ書き換えるのがちょっと嫌だったので、\n一旦追加して、要件満たした後に column_a を削除するためこの対応をとった。\n最初試したこと column_b に column_a を全部いれるんだから普通にUPDATEすればいけると思い、\n1 UPDATE tables SET column_b = (SELECT column_a FROM tables); と書いたが、 You can’t specify target table ‘tables’ for update in FROM clause\nとなる。\n原因 公式リファレンスにもある通り(弊社はmysql)、どうやら更新や削除を同一テーブルから参照するとデータに不整合が起きる。と理解。\nサブクエリーは SELECT ステートメントだけでなく、UPDATE および DELETE ステートメント内でも正当であるため、UPDATE ステートメント内の割り当てのためにサブクエリーを使用できます。ただし、サブクエリーの FROM 句と更新のターゲットの両方に同じテーブル (この場合は、テーブル t1) を使用することはできません。\nデータが膨大だった場合に、サブクエリで参照しているテーブルのデータが更新中に担保されない危険性がある?のかな。\n対応 1 2 3 4 5 6 7 8 select count(*) as \u0026#34;aとbの差分\u0026#34; from tables where tables.column_a != tables.column_b; -- 更新件数が何件あるか確認 update tables inner join (select id, column_a from tables) as tmp_tables on tables.id = tmp_tables.id set tables.column_b = tmp_tables.column_a where tables.column_b != tmp_tables.column_a; 一旦自己結合してみた。今回データ量少なかったのもあって実行したけど、大きかったらもっとしっかり調査せねば。。\nbetterな書き方あったら知りたいです。\n","description":"You can’t specify target table ‘tables’ for update in FROM clause","id":10,"section":"posts","tags":["SQL","mysql"],"title":"自己相関サブクエリを使ってupdateするには","uri":"http://localhost:1313/ja/posts/tech/2021/10/12/"},{"content":"Reactの選択肢を増やすためにやる\nセクション3 再レンダリングの仕組みを知り、レンダリングを最適化する ・propsが変更されたコンポーネントは再レンダリング、\n・stateが変更されたコンポーネントは再レンダリング\n・(重要)親のコンポーネントが再レンダリングされた時、子も再レンダリングされる\n孫、子、親とあった時に、親がレンダリングされても孫が再レンダリングされる。\nmemoを使って最適化 memo を使えば、propsが変更されるまで再レンダリングされない処理として使える\nReact.memo / useCallback / useMemo の使い方、使い所を理解してパフォーマンス最適化をする\nuseCallback useCallback(コールバック関数, 依存配列);\nReact.memo / useCallback / useMemo の使い方、使い所を理解してパフォーマンス最適化をする\nセクション4 様々なCSSの当て方を知る InlineStyle 普通に定数でインラインスタイルを指定して当てる方法\n1 2 3 4 5 6 const titleStyle = { border: \u0026#34;solid 2px #392eff\u0026#34;, borderRadius: \u0026#34;20px\u0026#34;; // camelCaseで書かないとエラー \u0026lt;p style={titleStyle}\u0026gt;InlineStyle\u0026lt;/p\u0026gt; } CSS Modules Hoge.module.scssのように module を指定する\nimportして使用する。\nclassName で囲む\n純粋なcssとして書ける。scssは、Syntactically Awesome StyleSheetsの略。\n1 2 3 4 const titleStyle = { border: solid 2px #392eff;, // \u0026#34;\u0026#34; は不要 border-radius: 20px; // ハイフンつなぎ } SytledJSX JSXの中にcssを書いていく記法\njsx=\u0026quot;true と明記する必要がある\njsx内に書くの冗長になりそうと思った\nだがNext.jsだとデフォルトらしい\n1 2 3 4 5 6 7 8 // importとかreturnとかその他諸々は割愛 \u0026lt;p className=\u0026#34;container\u0026#34;\u0026gt;StyledJSX\u0026lt;/p\u0026gt; \u0026lt;style jsx=\u0026#34;true\u0026#34;\u0026gt; {` .container { border: solid 2px #392eff; border-radius: 20px; } `}\u0026lt;/style\u0026gt; StyledComponents 人気がある、sassと同じ様にかける。\n注意点。コンポーネントかsytledComponentsか分からなくなる。\n1 2 3 4 5 6 7 8 \u0026lt;Container\u0026gt; \u0026lt;p\u0026gt;SytledComponents\u0026lt;/p\u0026gt; \u0026lt;/Container\u0026gt; const Container = styled.div` border: solid 2px #392eff;, // \u0026#34;\u0026#34; は不要 border-radius: 20px; // ハイフンつなぎ `; emotions @emotion/reactと@emotion/styledが必要\n1 2 3 4 5 6 7 /** @jsx = jsx **/ //左記のようにおまじないがいる const containerStyle = css` border: solid 2px #392eff; border-radius: 20px; ` \u0026lt;p css={containerStyle}\u0026gt;emotion\u0026lt;/p\u0026gt; 手法がいくつあかり、styled-componets で出来ることはできそうなイメージ。\n種類ありすぎ。。\nセクション5 React Router よく使うやつ\nBrowserRouter Route Switch Link useParams URLSearchParam useLocation useHistory exactはちゃんと書く。\nrenderする時propsでmatch url して重複防ぐ\npathは分割する\nクエリパラメータ\nReact入門 ～React Router編～\nセクション6 コンポーネントの分割方法(Atomic Design) Atom(原子)の作成 buttonとかをまず共通のcssの物で作り、そこから分岐して拡張するイメージ。\n同じ記述を原子に書かないようにしたい。\nMolecule(分子)の作成 butttonとinputなど、atoms + α\nOrganism(有機体)の作成 atomとmoleculeを使った物など。\n分割できるものは分割しておく。\nI設計、ビジュアルデザイン、HTMLコーディングを実際に行う場合に「〇〇エリア」「〇〇ボックス」「〇〇領域」と呼ばれるもので、それ自体が独立して意味を持ち、ユーザとのインタラクションを定義可能なものという位置付\nTemplate(レイアウト)の作成 生体を更に組み合わせたページ全体のレイアウトを定義\nPage(一画面)の作成 ページのデータをTemplates層に流し込む\nreact-router-dom\nstyled-components\nセクション7 グローバルなStateを管理する propsのバケツリレーはつらいので、\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 import React, { createContext, useState } from \u0026#39;react\u0026#39; export const UserContext = createContext({}); export const UserProvider = (props) =\u0026gt; { const { children } = props; const [userInfo, setUserInfo] = useState(null) return ( \u0026lt;UserContext.Provider value={{ userInfo, setUserInfo }}\u0026gt; {children} \u0026lt;/UserContext.Provider\u0026gt; ); }; UserContext を各コンポーネントで呼び出して使うようにすると、propsのバケツリレーを避けれる\nセクション8 json placholder json placeholderはいいぞという話だった\n便利ね\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import axios from \u0026#34;axios\u0026#34;; import \u0026#34;./styles.css\u0026#34;; export default function App() { const onClickUsers = () =\u0026gt; { axios.get(\u0026#34;https://jsonplaceholder.typicode.com/users\u0026#34;).then((res) =\u0026gt; { console.log(res.data); }).catch((err) =\u0026gt; { console.log(err); }) } const onClickUser1 = () =\u0026gt; { axios.get(\u0026#34;https://jsonplaceholder.typicode.com/users?id=1\u0026#34;).then((res) =\u0026gt; { console.log(res.data); }).catch((err) =\u0026gt; { console.log(err); }) } return ( \u0026lt;div className=\u0026#34;App\u0026#34;\u0026gt; \u0026lt;button onClick={onClickUsers}\u0026gt;users\u0026lt;/button\u0026gt; \u0026lt;button onClick={onClickUser1}\u0026gt;id=1のuser \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); } セクション9 React × TS 基本 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 /* eslint-disable @typescript-eslint/no-unused-vars*/ // tsの基本の型 // bool let bool: boolean = true; // number let num: number = 1; // string let str: string = \u0026#34;busitora\u0026#34;; // array let arr1: Array\u0026lt;number\u0026gt; = [0,1,2]; // こっちのが良さそう let arr2: number[] = [0,1,2]; let tuple: [number, string] = [1, \u0026#34;aaa\u0026#34;]; // any let any1: any = false; // void 何も返却しない (型アサーション効くので書かなくても良き) const func1 = (): void =\u0026gt; { const test = \u0026#34;test\u0026#34; } // null let null1: null = null; // undefined let undefined1: undefined = undefined; // object let obj1: object = {}; let obj2: { id: number, name: string} = { id: 1, name: \u0026#34;busitora\u0026#34; }; https://codesandbox.io/s/ts-practice-87j6y?file=/src/App.tsx\n型の簡単な練習(既知だった)\nセクション10 React × TypeScript実践 JsonPlaceHoler\nOmit\u0026lt;T, \u0026quot;hoge\u0026quot;\u0026gt; やPickは便利そう\nFCやVFCが馴染みがなかった\nここにやったこと書いてある。\npropsに型つけたり、型用のtsファイル作ったりなど。\nhttps://codesandbox.io/s/floral-snowflake-g7z6h?file=/src/App.tsx\nセクション11 カスタムフック 便利な処理をまとめて書くことで可読性、再利用性を高める\nセクション12 実践アプリ chakra ui便利\nhttps://github.com/reachscript-jak/react-intermediate-practice-app\nログイン機能をreactで作るのは流石にしんどい\nあと、CSSもめっさむずい。\n定期的に見直していきたい。\nコンポーネント分割や、設計力、あとシンプルにJS力など高めていきたい\nめっちゃよかった、このudemy\n備考 余談だが、カッコのブラケット結構読み方忘れるからメモ。\nカッコの種類 読み方 () 丸カッコ、パーレン [] 角カッコ、スクエアブラケット {} 波カッコ、ブレース、カーリーブラケット \u0026lt;\u0026gt; 山カッコ、大なり小なり、(アングルブラケット) ","description":"udemyのmemo","id":11,"section":"posts","tags":["React","JavaScript","memo","udemy"],"title":"Reactに入門した人のためのもっとReactが楽しくなるステップアップコース完全版","uri":"http://localhost:1313/ja/posts/tech/2021/10/02/"},{"content":"はじめに 実務でテストの重要性を嫌というほど感じているので、読む。\n自分用メモで気づきメインで書くので、\n詳しく知りたい人は購入することを推奨。\nこういう題材ってJavaとか多いよな。。\n各章で、章の感想記事を読んだりして貼ることもある。\nコードを書く前に、失敗する自動テストコードを必ず書く\n重複を除去する 1部 多国通貨 目標をTODOリストとして書き出す TODOリストから一つピックアップし、テストを書く テストコードを実行して失敗させる（レッド） 実装コードを書く できる限り最短でテストが通るコードを実装する（グリーン） コードの重複を除去する（リファクタリング） 次のTODOを選び、2に進む 決してテストを書くことが目的ではなく，このサイクルを回すことで「動作する」「きれいな」コードを書くのが目的です． 第1章 仮実装 機能を作る時はTodoリストを準備する。\n細かいステップを踏み続けられるようになることが重要、\n第2章 明白な実装 仮実装→コードでまずベタ書きの値を使い、実装をすすめるに従って\n徐々に変数に置き換えていく。\n明白な実装 → すぐに頭の中の実装をコードに落とす\n第3章 三角測量 ValueObject → その名のとおり値を表すオブジェクト。ここでいう値とはドメイン駆動設計という設計手法に登場する概念\n1 2 3 4 5 6 7 public class MoneyTest { @Test public void testEquality() { assertTrue(new Dollar(5).equals(new Dollar(5))); assertFalse(new Dollar(5).equals(new Dollar(6))); } } 同じインスタンスでテストが通ることもあるので、Trueを書いたらFalseも実装すると、テストとして担保される。\nただ、どうやってリファクタリングをするかわからない時などに使うべきなので、一時的に使用するといい感じ。\n第4章 意図を語るテスト 値をそのまま比較するのではなく、オブジェクトどうしで比較してテストすることで、テストの意図を明確にできる。\n値で比較しないことにより、amountをprivateメソッドにできるのは参考になる。\n第5章 原則をあえて破る時 ・コピーアンドペーストによる再利用は、きれいな設計を壊すため抽象化の敗北になる。\n素早く通るために、重複とかいろいろ罪は犯してよいが、これらは４，５のステップがあるからこそ意味のあるもので、\n「設計をないがしろにしてよい」というわけではない\nラクスルの輪読会メモ\n第6章 テスト不足に気づいたら 5章でコピーアンドペーストしたコードを綺麗にするために、２つのクラスの親クラスとしてMoneyクラスを導入し、\n#equalsの実装を共通化した章。\nテストが十分にない又は全くないコードに対してTDDを行うことも今後あるだろう。\n十分な量のテストがない場合、テストによって守られていないコードのリファクタリングを行わざるをえない。\nテストがないまま、リファクタリングを続けてしまうとコードを破壊してしまう。\nテストがない場合は、リファクタリングのためにテストコードを書く。\n第7章 疑念をテストに翻訳する FrancとDollarを比較してみると、テストが通ってしまう。\n頭の中の悩みをテストで表現した\n完璧ではないものの、まずますなやり方（getClass）でテストを通した\nさらなる設計は、本当に必要になるまで先延ばしにした\n第8章 実装を隠す DollarとFrancが似通っているので、Moneyクラスに処理を移譲。\nテストの方は直接 Dollar や Franc のコンストラクタを呼んでいた部分が factory method に置き換わっただけ\nこの変更で直接 Money のサブクラスを呼ぶ必要がなくなり、これらを削除する準備が進んだ。\n第9章 歩幅の調整 通過の概念(Currency)を導入して、サブクラスの実装をさらに近づけて行った章。\n「気になって調べた割り込みに割り込みはしない」というルールは、\nテストだけではなく全てに共通することだと思った。\n第10章 テストに聞いてみる デバッグのためにtoStringを書いて、テストを書かずに実装したのが印象的だった。\n自身の実装がただしいかをテストに説いてリファクタする。\n(少し曖昧)\n第11章 不要になったら消す サブクラスの仕事を減らし続け、とうとう消すところまでたどり着いた\nサブクラス削除前の構造では意味があるものの、削除後は冗長になってしまうテストたちを消した\n第12章 設計とメタファー お金がお金自身を増やすようなことはなくて、お金を管理する第三者的なオブジェクトを登場させるほうが良くなりそう\nという部分について触れられている章\n第13章 実装を導くテスト 重複を除去できていないので、TODOリストの項目を「済」にしなかった\n実装の着想を得るためにさらに先に進むことにした\n後に必要になりそうなオブジェクト（Sum）の作成を促すテストを書いた\n速やかに実装を行った（Sumのコンストラクタ）\nキャストを使って以下書で実装した後で、テストが通るまで本来あるべき場所にコードを移した\nポリモーフィズムを使って明示的なクラスチェックを置き換えた\n第14章 学習用テストと回帰テスト 必要になると予想されていたパラメータ追加をすぐに行った\nコードとテストの間のデータの重複を括りだした\n言語仕様を調べるテストを書いた\n実装内部で使うためだけのヘルパークラスを個別のテスト無しで書いた\nリファクタリング中にミスを犯したが、問題を再現するテストを追加して、着実に前進した\n第15章 テスト任せとコンパイラ任せ テストを書きたい時に\n1.抽象度を落とし、具体的なテストを書きまくりまずは動作させた後にリファクタする方法\n2.コンパイラを信頼し、自分がミスをしたら必ず教えてくれると信じて突き進む道\n[社内勉強会レポート] 『テスト駆動開発』読書勉強会 #6\n第16章 将来の読み手を考えたテスト 将来テストを読んだ人がメンテしやすいような書き方をすべき。\n例えば、RSpecでいうと subject や shared_example を乱用しないなど、\n共通化しすぎると読解に時間がかかるので、少し多く書いてもいいと個人的には思う\n第17章 他国通貨の全体ふりかえり プロセス 1.小さいテストを追加する\n2.すべてのテストを動かし、失敗があることを確認する\n3.変更を行う\n4.再びすべてのテストを動かし、すべて成功すること確認する\n5.リファクタリングを行い重複を除去する\nテスト品質 テストコードは、システム開発し続けるためには有益\nただ、以下のテストの代替にはならない\n・パフォーマンステスト\n・負荷テスト\n・ユーザビリティテスト\nテスト評価手法 ステートメントカバレッジ\n経路網羅率のこと\n「全部の処理を1回は通るようにすること」が正 になるように設定して行うテスト（命令網羅で行うテスト）における「テストを全部やると、これだけ確認できるはずだよ。それに対して、今はこれだけの確認が終わってるよ」な割合のこと\n欠陥挿入\n「プロダクトコードの任意の行を変更したら、テストが失敗しなければならない」という考え方\n感想 個人的には、クリティカルな部分は本当にちゃんとテスト書いてほしい。\nそうしないと、リファクタがめちゃくちゃ難しく、その確認で工数がめっちゃ割かれる。\nあと、Aの実装がBの実装に依存している時、AテストがB実装まで\n面倒を見ないといけないようなテストコードは書かないでほしい\n例) Service層とか\nそういう場合はMockにするとか、AとBを分けてテストしたい。\nテストしやすいコードにする必要があるので、設計はマジで大事。\n第18章 xUnitに向かう小さな一歩 最初はDRYに書かずにベタ書きする。その後、リファクタする。\n第19章 前準備 テストをシンプルに書けるほうが、パフォーマンスよりも大事だという意思決定をおこなった。\n第20章 後片付け テスト戦略をフラグからログに変更した\n第21章 数え上げ まずは仮実装を下記、ベタ書きの値を変数に置き換えることで段階的に実装を本物に近づけた\n第22章 失敗の扱い 失敗するコードを書いてから、コードを書いてそれらを成功にしていく\n第23章 スイートにまとめる composite化をテストを通して行った\n第24章 自分自身でxUnitを実装する意義。\nxUnitの精神はシンプルさ\n道具の中身を知るのは使いこなす上で重要\n新しい言語でxUnitを実装してみると、その言語のある程度の機能は使えている\n第25章 テスト駆動開発のパターン ストレスレベルが増加した時におこること\n「ストレスがかかるほどテストを行う頻度が減る。テストが減れば、テストが増える。\nエラーが増えれば、ストレスも増える。以下同様に繰り返される」\nテストをする前に、何をテストするのかをリストに書くこと。\n実装から書くと、後からテスト書かなくなるので先にテストを書く。\nエンジニア転職した時にやったほうがいいのは、\nコードを読んで、仕様を自分なり外部(会社内)にアウトプットすることだと今更思った(今はNotionに結構書き始めてるけど、当時やってなかった)。\n基本どこもドキュメント不足してる(予想)から有難がられるし、違ったら、\n「あ~ここはAの経緯があって今はBでCなんだよ」 「実はこのコードは遺産で、、」 指摘が起こる。新規開発で仕様がよく変わるフェーズならしゃーなしやけど、やって損はないな。\nコード理解も進むし、仕様もわかるし、有難がられるし、一石三鳥ヨシ！！！！\n第26章 レッドバーのパターン 機能を書き始めるときの最初の問いは、「この機能はどこに属するべきだろうか」\n第27章 テスティングのパターン 必ず小さくテストは始めること。\n本物のデータベースは極力使わないこと\n↓\nこれまじでやってる。反省\n一人でコードを書いている時、コーディング時間のうまい終わらせ方は、テストを失敗する状態で\n終わらせる状態\n第28章 グリーンバーのパターン 仮実装の有効性\n1.心理的効果 → グリーンとレッドでは精神状態が全く異なる。バーがグリーンなら、自分がどこにいるかわかる。そこから自信をもってリファクタリングを開始できる\n2.スコープ制御 → プログラマは、この先起こる問題を予測するのが得意な生き物。1つの実例から始め\nそこから一般化を行うことで、本質とは関係ない問題に気を取られずに作業を行えるようになる\n仮実装の段階でテストを書くことは、デメリットよりメリットの方が大きいとのこと。\n第29章 xUnitのパターン 共通コードを抽出するかどうかは、インターフェイスの変更の度合いを鑑みるとよさそう\n第30章 デザインパターン 書くのがしんどいので割愛。ググったリンクを参考として貼る\nhttps://github.com/at-grandpa/study-tdd/issues/36\n第31章 リファクタリング システムの設定変更を大きな変更であっても、小さなステップの積み重ねで行っていくパターン\nTDDのリファクタリングは、テストさえ通れば、べた書きでもそれをリファクタリングという\n考えつく限りのテストを書く\n網羅性が大事\n問題がありそうだったけど、他のテストが全部通ったのでコミットした、は許されない\nリファクタは一つずつやることが正義\n第32章 TDDを身につける 条件分岐 ループ 操作 ポリモーフィズム がテストすべき対象\n感想 確かに、プロジェクトが進む毎に変更が増え、testがないから\n確認することが増え。。みたいなことは経験したことがある。\nTDDほど、先にtestを書くことが必ずしも生とは言えないが、\ntestの向き合い方に関しては考え直すいい機会になった\n参考 TDDは死んだ。テスティングよ栄えよ。 by DHH\n","description":"テスト駆動開発の感想と要約をします","id":12,"section":"posts","tags":["test","book"],"title":"テスト駆動開発","uri":"http://localhost:1313/ja/posts/tech/2021/09/22/"},{"content":"業務でReactを一瞬使ったが、体系的に学んでみたかったので購入。\nモダンJavaScriptの基礎から始める挫折しないためのReact入門\n※雑なメモとして残すが、自分以外には有益ではないと思います。\nセクション2 環境について CodeSandbox for vanilla JS\nホットリロードが効いてるので変更がすぐ反映される\n基本は⌘Sする。\npretier使ってるので自動整形される\ncodesandboxとlinkできるの便利(create→fork→作業)\nセクション3 ReactやVueを使う上で知っておきたいこと 従来はDOM操作だったので、レンダリングコストが高かった/複雑だった\n↓\n仮想DOMの誕生。\nかつてはすべてのJSに記載していたので、\nパッケージマネージャが生まれた\nECMAスクリプト→ES2015(ES6)\nトランスパイラ→新しい記法を古い記法に変換。IEとか。\nセクション4 JS基本機能に触れる 基礎のため割愛\nセクション5 VANILLA JS で TODOアプリ作成\n完成品\n空でもcreate出来るところとか細かいところはユルシテ\nJavaScript HTML CSS 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 import \u0026#34;./styles.css\u0026#34;; const onClickAdd = () =\u0026gt; { const inputText = document.getElementById(\u0026#34;add-text\u0026#34;).value; document.getElementById(\u0026#34;add-text\u0026#34;).value = \u0026#34;\u0026#34;; createImcompletelist(inputText); }; // 未完了リストから指定のリストを削除 const deleteFromImcompleteList = (target) =\u0026gt; { document.getElementById(\u0026#34;imcomplete-list\u0026#34;).removeChild(target); // deleteTarget.remove(); だとよくなさそう？ }; // 未完了リストに追加する関数 const createImcompletelist = (text) =\u0026gt; { // divを生成 const div = document.createElement(\u0026#34;div\u0026#34;); div.className = \u0026#34;list-row\u0026#34;; // liを作成 const li = document.createElement(\u0026#34;li\u0026#34;); li.innerText = text; // 未完了のリストに追加 document.getElementById(\u0026#34;imcomplete-list\u0026#34;).appendChild(div); // button(完了)タグ作成 const completeButton = document.createElement(\u0026#34;button\u0026#34;); completeButton.innerText = \u0026#34;完了\u0026#34;; completeButton.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { deleteFromImcompleteList(completeButton.parentNode); const addTarget = completeButton.parentNode; // todo内容テキストを取得 const text = addTarget.firstElementChild.innerText; // div以下を初期化 addTarget.textContent = null; // liタグを作成 const li = document.createElement(\u0026#34;li\u0026#34;); li.innerText = text; // 戻すボタンタグ設定 const backButton = document.createElement(\u0026#34;button\u0026#34;); backButton.innerText = \u0026#34;戻す\u0026#34;; backButton.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { // 押された戻すボタンの親タグを完了リストから削除 const deleteTarget = backButton.parentNode; document.getElementById(\u0026#34;complete-list\u0026#34;).removeChild(deleteTarget); // テキストを取得 const text = backButton.parentNode.firstElementChild.innerText; createImcompletelist(text); }); // divタグの子要素に各要素を設定 addTarget.appendChild(li); addTarget.appendChild(backButton); // 完了したリストに追加 document.getElementById(\u0026#34;complete-list\u0026#34;).appendChild(addTarget); }); // button(終了)タグ作成 const deleteButton = document.createElement(\u0026#34;button\u0026#34;); deleteButton.innerText = \u0026#34;削除\u0026#34;; deleteButton.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { deleteFromImcompleteList(deleteButton.parentNode); }); div.appendChild(li); div.appendChild(completeButton); div.appendChild(deleteButton); }; document .getElementById(\u0026#34;add-button\u0026#34;) .addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; onClickAdd()); 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Todo(JS)\u0026lt;/title\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;input-area\u0026#34;\u0026gt; \u0026lt;input id=\u0026#34;add-text\u0026#34; placeholder=\u0026#34;todoを入力\u0026#34; /\u0026gt; \u0026lt;button id=\u0026#34;add-button\u0026#34;\u0026gt;追加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;incomplete-area\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;title\u0026#34;\u0026gt;未完了のtodo\u0026lt;/p\u0026gt; \u0026lt;ul id=\u0026#34;imcomplete-list\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;complete-area\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;title\u0026#34;\u0026gt;完了したtodo\u0026lt;/p\u0026gt; \u0026lt;ul id=\u0026#34;complete-list\u0026#34;\u0026gt;\u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;src/index.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 body { font-family: sans-serif; } input { border-radius: 16px; border: none; padding: 6px 16px; outline: none; /* focusした時に枠がでない */ } button { border-radius: 16px; border: none; padding: 6px 16px; margin-right: 5px; } button:hover { background-color: #ff7fff; color: #fff; cursor: pointer; } li { margin-right: 8px; } .input-area { background-color: #c1ffff; width: 400px; height: 30px; padding: 8px; margin: 8px; border-radius: 8px; } .complete-area { background-color: #ffffe0; width: 400px; min-height: 200px; padding: 8px; margin: 8px; border-radius: 8px; } .incomplete-area { background-color: #c6ffe2; width: 400px; min-height: 200px; padding: 8px; margin: 8px; border-radius: 8px; } .title { text-align: center; margin-top: 0px; font-weight: bold; color: #666; } .list-row { display: flex; /* 横並び */ align-items: center; padding-bottom: 4px; } HTMLとCSSについては特に言うことはない。idとclassを採番したくらい。\nJSでTODOアプリ作ると、親とか子供の要素指定リレーが結構たいへん。\nTODOアプリでこうだから、業務レベルで生JSのみで書いたら死ぬ。\n・parentNode → 指定されたノードの DOM ツリー内の親ノードを返します。\n・textContent →ノードおよびその子孫のテキストの内容を表します。\n・innerText → ノードとその子孫の「レンダリングされた」テキスト内容を示します\nあたりはちょっと調べた。\nセクション6 Reactの基本 ・JSXは\u0026lt;div\u0026gt;で囲まないとエラーになる。\n・コンポーネントはPascalCaseにすること。\n・変数等は、camelCaseにすること。\nもしくは、\u0026lt;React.Fragment\u0026gt;や\u0026lt;\u0026gt;囲む。(divを使いたくない場合)\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import React from \u0026#34;react\u0026#34;; const App = () =\u0026gt; { const onClickButton = () =\u0026gt; alert(); const contentStyle = { color: \u0026#39;blue\u0026#39;, fontSize: \u0026#39;18px\u0026#39; }; return ( \u0026lt;React.Fragment\u0026gt; \u0026lt;h1 style={{color: \u0026#39;red\u0026#39;}}\u0026gt;hello\u0026lt;/h1\u0026gt; {/* ={{}} で囲む redもstringとして囲む */} \u0026lt;p style={contentStyle}\u0026gt;good\u0026lt;/p\u0026gt; {/* 定義してからも可能 */} \u0026lt;button onClick={onClickButton}\u0026gt;ボタン\u0026lt;/button\u0026gt; \u0026lt;/React.Fragment\u0026gt; ) } export default App; props ・props.childrenかpropsとして渡すか\nuseState 1 2 3 4 5 const [num, setNum] = useState(0); const onClickCountUp = () =\u0026gt; { setNum(num + 1) } 上記のように設定して、関数をトリガーにsetNum等で変更する。\n再レンダリング Reactのコンポーネントが再レンダリングされるので、差分を表示出来る。\n・propsの中身が変わった時、\n・stateを変更した時\n・親のコンポーネントが再レンダリングされた時、子も再レンダリングされる\nToo many re-rendersなど\n無限レンダリングをはらむ可能性あるコードは気をつける。レンダリングコストを考える。\nuseEffect 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import React, { useState } from \u0026#34;react\u0026#34;; const App = () =\u0026gt; { const [num, setNum] = useState(0); const [showFlag, setShowFlag] = useState(true); const onClickCountUp = () =\u0026gt; { setNum(num + 1); }; const onClickSwitchShowFlag = () =\u0026gt; { setShowFlag(!showFlag); }; if (num \u0026gt; 0) { if (num % 3 === 0) { showFlag || setShowFlag(true); // ここがあるのでnumが変わってもボタンは変わらない } else { showFlag \u0026amp;\u0026amp; setShowFlag(false); } } return ( \u0026lt;React.Fragment\u0026gt; \u0026lt;button onClick={onClickCountUp}\u0026gt;カウントアップ！\u0026lt;/button\u0026gt; \u0026lt;p\u0026gt;{num}\u0026lt;/p\u0026gt; \u0026lt;button onClick={onClickSwitchShowFlag}\u0026gt;on/off!\u0026lt;/button\u0026gt; {showFlag \u0026amp;\u0026amp; \u0026lt;p\u0026gt;(´ε｀ )\u0026lt;/p\u0026gt;} \u0026lt;/React.Fragment\u0026gt; ) } export default App; 上記だと、on/offのボタンが効かなくなる。\nnum と setflag の値の処理が邪魔しあっているのでflagがレンダリングされず動かない。\nそこで関心の分離をする。\n1 2 useEffect(() =\u0026gt; { }, []); 第2引数が空の場合初期レンダリングのみ通る。\n1 2 3 4 5 6 7 8 9 10 useEffect(() =\u0026gt; { console.log(\u0026#34;num is changed\u0026#34;); if (num \u0026gt; 0) { if (num % 3 === 0) { showFlag || setShowFlag(true); } else { showFlag \u0026amp;\u0026amp; setShowFlag(false); } } }, [num]); 上記のようにすれば、showFlagのstateの値に関心を持たないため、on/offが効くようになる。\nただ、第2引数にeffect内のshowFlag を使ってるのでlintはエラーになるのでそこは注意(PJ毎にどう管理するかはおまかせ)\n完成品\nセクション7 React Todo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 import React, { useState } from \u0026#34;react\u0026#34;; import \u0026#34;./styles.css\u0026#34;; export const App = () =\u0026gt; { const [todoText , setTodoText] = useState(\u0026#34;\u0026#34;); const [incompleteTodos, setIncompleteTodos] = useState([]); const [completeTodos, setCompleteTodos] = useState([]); const onChangeTodoText = (e) =\u0026gt; setTodoText(e.target.value); //inputがchangeする度に変わる const onClickAdd = () =\u0026gt; { if (todoText === \u0026#34;\u0026#34;) return; const newTodos = [...incompleteTodos, todoText]; setIncompleteTodos(newTodos); setTodoText(\u0026#34;\u0026#34;); } const onClickDelete = (idx) =\u0026gt; { const newTodos = [...incompleteTodos] newTodos.splice(idx, 1); setIncompleteTodos(newTodos) }; const onClickComplete = (idx) =\u0026gt; { const newIncompleteTodos = [...incompleteTodos]; newIncompleteTodos.splice(idx, 1); const newCompleteTodos = [...completeTodos, incompleteTodos[idx]]; setIncompleteTodos(newIncompleteTodos); setCompleteTodos(newCompleteTodos); // 未完了から削除して、完了に一つ足す }; const onClickBack = (idx) =\u0026gt; { const newCompleteTodos = [...completeTodos]; console.log(newCompleteTodos); newCompleteTodos.splice(idx, 1) const newIncompleteTodos = [...incompleteTodos, completeTodos[idx]]; setCompleteTodos(newCompleteTodos); setIncompleteTodos(newIncompleteTodos); }; return ( \u0026lt;\u0026gt; \u0026lt;div className=\u0026#34;input-area\u0026#34;\u0026gt; \u0026lt;input placeholder=\u0026#34;todoを入力\u0026#34; value={todoText} onChange={onChangeTodoText} /\u0026gt; \u0026lt;button onClick={onClickAdd}\u0026gt;追加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;incomplete-area\u0026#34;\u0026gt; \u0026lt;p className=\u0026#34;title\u0026#34;\u0026gt;未完了のtodo\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; {incompleteTodos.map((todo, idx) =\u0026gt; { return ( \u0026lt;div key={todo} className=\u0026#34;list-row\u0026#34;\u0026gt; {/* mapなどレンダリングした時はkeyがいる */} \u0026lt;li\u0026gt;{todo}\u0026lt;/li\u0026gt; \u0026lt;button onClick={() =\u0026gt; onClickComplete(idx)}\u0026gt;完了\u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; onClickDelete(idx)}\u0026gt;削除\u0026lt;/button\u0026gt; {/* 関数に引数を渡す時はアロー関数で囲まないと即時実行される */} \u0026lt;/div\u0026gt; ) })} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div className=\u0026#34;complete-area\u0026#34;\u0026gt; \u0026lt;p className=\u0026#34;title\u0026#34;\u0026gt;完了のtodo\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; {completeTodos.map((todo, idx) =\u0026gt; { return ( \u0026lt;div key={todo} className=\u0026#34;list-row\u0026#34;\u0026gt; \u0026lt;li\u0026gt;{todo}\u0026lt;/li\u0026gt; \u0026lt;button onClick={() =\u0026gt; onClickBack(idx)}\u0026gt;戻す\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ) })} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/\u0026gt; ); }; コンポーネント分割後 Todoレベルではコンポーネント分割する意味は抽象度的に意味ないと思うが、いい復習になりました。\nApp.jsx InputTodo.jsx IncompleteTodos.jsx CompleteTodos.jsx 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 import React, { useState } from \u0026#34;react\u0026#34;; import \u0026#34;./styles.css\u0026#34;; import { InputTodo } from \u0026#34;./components/InputTodo\u0026#34;; import { IncompleteTodos } from \u0026#34;./components/IncompleteTodos\u0026#34;; import { CompleteTodos } from \u0026#34;./components/CompleteTodos\u0026#34;; export const App = () =\u0026gt; { const [todoText , setTodoText] = useState(\u0026#34;\u0026#34;); const [incompleteTodos, setIncompleteTodos] = useState([]); const [completeTodos, setCompleteTodos] = useState([]); const onChangeTodoText = (e) =\u0026gt; setTodoText(e.target.value); //inputがchangeする度に変わる const onClickAdd = () =\u0026gt; { if (todoText === \u0026#34;\u0026#34;) return; const newTodos = [...incompleteTodos, todoText]; setIncompleteTodos(newTodos); setTodoText(\u0026#34;\u0026#34;); } const onClickDelete = (idx) =\u0026gt; { const newTodos = [...incompleteTodos] newTodos.splice(idx, 1); setIncompleteTodos(newTodos) }; const onClickComplete = (idx) =\u0026gt; { const newIncompleteTodos = [...incompleteTodos]; newIncompleteTodos.splice(idx, 1); const newCompleteTodos = [...completeTodos, incompleteTodos[idx]]; setIncompleteTodos(newIncompleteTodos); setCompleteTodos(newCompleteTodos); // 未完了から削除して、完了に一つ足す }; const onClickBack = (idx) =\u0026gt; { const newCompleteTodos = [...completeTodos]; console.log(newCompleteTodos); newCompleteTodos.splice(idx, 1) const newIncompleteTodos = [...incompleteTodos, completeTodos[idx]]; setCompleteTodos(newCompleteTodos); setIncompleteTodos(newIncompleteTodos); }; return ( \u0026lt;\u0026gt; \u0026lt;InputTodo todoText={todoText} onChange={onChangeTodoText} onClick={onClickAdd} /\u0026gt; \u0026lt;IncompleteTodos todos={incompleteTodos} onClickComplete={onClickComplete} onClickDelete={onClickDelete} /\u0026gt; \u0026lt;CompleteTodos todos={completeTodos} onClickBack={onClickBack} /\u0026gt; \u0026lt;/\u0026gt; ); }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 import React from \u0026#34;react\u0026#34;; export const InputTodo = (props) =\u0026gt; { const { todoText, onChange, onClick} = props; return ( \u0026lt;div className=\u0026#34;input-area\u0026#34;\u0026gt; \u0026lt;input placeholder=\u0026#34;todoを入力\u0026#34; value={todoText} onChange={onChange} /\u0026gt; \u0026lt;button onClick={onClick}\u0026gt;追加\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 import React from \u0026#34;react\u0026#34;; export const IncompleteTodos = (props) =\u0026gt; { const { todos, onClickComplete, onClickDelete } = props; return ( \u0026lt;div className=\u0026#34;incomplete-area\u0026#34;\u0026gt; \u0026lt;p className=\u0026#34;title\u0026#34;\u0026gt;未完了のtodo\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; {todos.map((todo, idx) =\u0026gt; { return ( \u0026lt;div key={todo} className=\u0026#34;list-row\u0026#34;\u0026gt; {/* mapなどレンダリングした時はkeyがいる */} \u0026lt;li\u0026gt;{todo}\u0026lt;/li\u0026gt; \u0026lt;button onClick={() =\u0026gt; onClickComplete(idx)}\u0026gt;完了\u0026lt;/button\u0026gt; \u0026lt;button onClick={() =\u0026gt; onClickDelete(idx)}\u0026gt;削除\u0026lt;/button\u0026gt; {/* 関数に引数を渡す時はアロー関数で囲まないと即時実行される */} \u0026lt;/div\u0026gt; ) })}; \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; ); }; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import React from \u0026#34;react\u0026#34;; export const CompleteTodos = (props) =\u0026gt; { const { todos, onClickBack } = props; return ( \u0026lt;div className=\u0026#34;complete-area\u0026#34;\u0026gt; \u0026lt;p className=\u0026#34;title\u0026#34;\u0026gt;完了のtodo\u0026lt;/p\u0026gt; \u0026lt;ul\u0026gt; {todos.map((todo, idx) =\u0026gt; { return ( \u0026lt;div key={todo} className=\u0026#34;list-row\u0026#34;\u0026gt; \u0026lt;li\u0026gt;{todo}\u0026lt;/li\u0026gt; \u0026lt;button onClick={() =\u0026gt; onClickBack(idx)}\u0026gt;戻す\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ) })} \u0026lt;/ul\u0026gt; \u0026lt;/div\u0026gt; ); }; 完成品\n","description":"udemyのmemo","id":13,"section":"posts","tags":["React","JavaScript","udemy"],"title":"モダンJavaScriptの基礎から始める挫折しないためのReact入門","uri":"http://localhost:1313/ja/posts/tech/2021/09/20/"},{"content":"はじめに DB設計を、基礎からもう一度学んで\nみたいと思い達人に学ぶDB設計徹底指南書を購入。\n自分用メモで気づきメインで書くので、\n詳しく知りたい人は購入することを推奨。\nマークダウンは試しにやっているので統一性がなくちょっと汚く見えるのはユルシテ\n1章 データベースを制する者はシステムを制す データベース(DBMS)の代表的モデル RDB(リレーショナルデータベース) OODB(オブジェクト指向データベース) XMLDB(XMLデータベース) KVS(キーバリューストア型) HD(階層型データベース) ODAとPOA DOA(data oriented approach) → データ中心アプローチ POA(process oriented approach) → プロセス中心アプローチ\n最初にデータがある。その次にプログラミングがある 3層スキーマ 外部スキーマ → ユーザーから見たデータベース 概念スキーマ → 開発者から見たデータベース 内部スキーマ → DBMSから見たデータベース 感想 データ設計で苦しむのは実務でも経験した。\n実際にDBを作成したあとに追加依頼が入ることもあるので、\n追加改修に応えられるようその都度ベストな設計をしていっても\n現実そうならないこともあるよな。。\n2章 論理設計と物理設計 論理設計のステップ エンティティの抽出(物理的実体を伴う必要はない) エンティティの定義(列(attributes)を決める) 正規化 ER図の作成 物理設計のステップ テーブル定義(概念スキーマ毎にテーブルを作成) インデックス定義 ハードウェアのサイジング](該当システムで処理されうるデータサイズを見積もって、「十分な容量のストレージ（記憶装置）を決める」) ストレージの冗長構成決定 ファイルの物理配置決定 RAID0→ 異なるディスクに「別々に」保存 RAID1→ 異なるディスクに「同じものを」保存 RAID5→ 3本で保存、1つまでなら壊れても可 RAID10 → RAID1とRAID0の組み合わせだが、コストが高い 感想 RAIDに関してはとりあえず、少なくてもRAID5。余裕があればRAID10 バックアップ設計 フルバックアップ 欠点1 → 時間が長い 欠点2 → ハードウェアリソースへの負荷が高い 欠点3 → サービス停止が必要 差分バックアップ 欠点 → 差分とフルバックアップの2つがあるので、その分手間 利点 → 早い。バックアップ量が減る 増分バックアップ 欠点 → リカバリの際に一番たいへん 利点 → 早い。バックアップ量が減る 感想 ハードウェアのサイジングは、必要十分なストレージサイズにする必要があるので、「ある程度余裕を持たせたストレージ容量にしておく」か「簡単に、ストレージの容量を追加できるような構成にしておく」のがよさそう。\nスケーラビリティが高いというやつ。\n関係ないけど、パズドラで以前ヘラ杯ロールバック事件合った時、あれは何バックアップだったんだろう。笑\nバックアップ方式は、 フルバックアップに増分or差分がヨシ 3章 論理設計と正規化~なぜテーブルは分割する必要があるのか？ テーブルの構成要素 外部キーは人間の親子関係と同じ\n外部キーがあれば、子供から消すのが吉(カスケード)\nキーとなる列には、コードやIDなど表示形態の定まった可変長文字列を用いる\n列には出来る限りNOT NULL制約をいれる\n正規化とは データベースで保持するデータの冗長性を排除し、一貫性と効率性を保持するためのデータ形式\n第1正規形 スカラ値 → 一つのセルに一つの値が含まれていること\n関数従属性的に、一つのセルにデータが複数入ることはおかしい\n「一つのセルに一つのデータしか含まない」\n主キーにNULLを含んではならない。\n第2正規形(部分関数従属) 第2正規形は、部分関数従属を解消することで得られる\n親と子でテーブルをわけない設計だと、親のない子は登録できないみたいなことがおきたり、データの正確性が欠けてしまう。\n無損失分解(テーブルを分割/結合可能)に出来るのでよい。\n第3正規形(推移的関数従属) テーブル内部に存在する段階的な従属関係のこと\nボイスーコットと第4、5は割愛\n感想 json型にして列に履歴を保管したりしてたけど、あれはよくなさそうだったな。流石に第1正規形には違和感しかないが、第2正規形までは普通にできそう。推移的関数従属をすぐ見抜けるようになりたい\n第5まであるが、基本的には第3正規形まで理解しておけばOK 4章 ER図~複数のテーブルの関係を表現する IE表記法 → 鳥の足のやつ IDEFIX 感想 既知だったが復習になった。\n独立エンティティと従属エンティティの区別は主キーに外部キーが含まれているかでわかる 5章 論理設計とパフォーマンス~正規化の欠点と非正規化 正規化 → データ整合性が担保される 非正規化 → SQLで結合を使わずにすむ 感想 正規化されていないデータは基本的には作らないようにする。\nただ、SQLのパフォーマンスが悪くなったりすることもあるので、\n意識する。かといって、非正規化にしていいというわけでない。\n正規化と非正規化はトレードオフ。原則として非正規化はNG。最後の手段である。 6章 データベースとパフォーマンス インデックス 統計情報 インデックス アプリケーションのコードに影響を与えない テーブルのデータに影響を与えない それでいて性能改善の効果が大きい B-treeインデックス 平均点が高い。\n均一性、持続性、処理汎用性、非等値性、親ソート性\nがどれもオールラウンダーで高い。 by クリス・デイト\nB-treeインデックスをどこにつくればいいか？\n大規模なテーブル カーディナリティの高い列(特定の値の列が、どのくらいの種類の多さを持つか) WHERE句の選択条件、または結合条件に使用されている列 しかし、カーディナリティが特定の列に偏っていると効果を発揮しづらい\n統計情報 SQL実行 パーサーが構文チェック 最適なデータアクセス方法(実行計画)が決定。この処理がRDBMSにおけるコアとなる部分。オプティマイザは、複数のアクセス経路、インデックスの有無、データの分散や偏りの度合い、RDBMSの内部パラメータなどの条件を考慮して、コストを評価し選択可能な多くの実行計画を作成。 実際にエンジニアが実行計画立案に関与することはないが、\n統計情報収集タイミング → データが大きく更新された後、なるべく早く 統計情報収集の対象(範囲) → 大きな変更のあったテーブル については意識しないといけない。\n感想 やみくもインデックスを貼るのではなく、検索されやすかったり、カーディナリティの高い列に作成するのがいいことを学んだ。\nインデックスはデータ構造が変わる時にメンテナンスを適宜行う\n実行計画については、もっと詳しく調べておきたい。\n本番のSQLを叩くの未だに緊張する。笑\n7章 論理設計のバッドノウハウ 配列型による非スカラ値(第一正規形未満) ダブルミーニング(レコードによって意味が違う) 単一参照テーブル テーブル分割 ダブルマスタ 総評 物理設計や論理設計、エンティティやバックアップ、\n正規化のトレードオフなど、普段意識しないところをさらっと復習できたのはよかった。実際に実務でDB設計する時に、辞書的な感じでまた読み返したいと思う。\n8章と9章は割愛。\n","description":"DB本の感想と要約をします","id":14,"section":"posts","tags":["book"],"title":"達人に学ぶDB設計徹底指南書","uri":"http://localhost:1313/ja/posts/tech/2021/09/19/"},{"content":"エンジニアになるまで 2018年は人材営業マンで\n2019年3月からプログラミングをやり始めて\n2019年9月からRUNTEQに通い\n2020年4月から某企業でエンジニアをしています。\nブログたちあげ 2020年4月よりエンジニアをやらせてもらっているわけですが、\nお恥ずかしい話アウトプットを全然しておらず、\n今後、「アピールしたいGithubのlinkください」\nみたいなこと言われたらぐぬぬとなることは避けられない。\nなんか作るよりてっとり早いのと、敷居が低いのでブログを構築。\n以前にも、ブシトラのはてぶ\nに結構書いてたりしてたんですが、モチベの波に左右されすぎてしまい、\n結構放置してしまい、めんどくさくなり書かなくなってしまいました。\n小さな習慣的には、\nモチベに頼ることはよくないから習慣化しようねって\n書いてあり納得でしかない。草を生やすことが以前好きだったので、\nその動機をうまく活用していきたい。\n個人的には、めちゃくちゃゴミ記事とかポエムをQiitaにあげたくないので、\n自分用の外部公開用メモとして使うイメージ。\nこれはシェアしなければ。。。と思ったらQiitaにも書くと思いますが!\nHugoにした理由は、\n・友人が使っていてよさそう\n・テーマが豊富でカスタムできそう(このブログはzzo)\n・参考記事が多くて導入しやすそう\nなどの理由です。本来ならNext.jsとかで作るのがいいかと思ったのですが、\nブログを今後メンテナンスしていくなら情報が多い方がいいよな。と思い採用\nしました。\nサイト作成にあたって参考にしたサイト HUGOによる静的ウェブサイト環境構築\nHugo + GithubPages でブログを構築する\n","description":"技術ブログを立ち上げました","id":15,"section":"posts","tags":["poem"],"title":"技術ブログ スタート","uri":"http://localhost:1313/ja/posts/tech/2021/09/11/"},{"content":"Markdownify box This is boxmd shortcode Simple box This is **box** shortcode Code tabs Make it easy to switch between different code\njava javascript 1 System.out.println(\u0026#39;Hello World!\u0026#39;); 1 console.log(\u0026#39;Hello World!\u0026#39;); Tabs for general purpose Windows MacOS Ubuntu Windows section 1 console.log(\u0026#39;Hello World!\u0026#39;); ⚠️Becareful that the content in the tab should be different from each other. The tab makes unique id hashes depending on the tab contents. So, If you just copy-paste the tabs with multiple times, since it has the same contents, the tab will not work.\nMacOS section Hello world!\nUbuntu section Great!\nExpand Expand me Title contents\nExpand me2 Title2 contents2\nAlert Colored box\nthis is a text this is a text this is a text this is a text Notice success text info text warning text error text ","description":"tabs, code-tabs, expand, alert, warning, notice, img, box","id":16,"section":"posts","tags":["shortcode"],"title":"ショートコード","uri":"http://localhost:1313/ja/posts/shortcodes/"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae.\nNote that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Inline Markdown In Table italics bold strikethrough code Code Blocks Code block with backticks html \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;UTF-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Item First Sub-item Second Sub-item Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn: Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","description":"Sample article showcasing basic Markdown syntax and formatting for HTML elements.","id":17,"section":"posts","tags":["markdown","css","html","themes"],"title":"マークダウンガイド","uri":"http://localhost:1313/ja/posts/markdown-syntax/"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Vimeo Simple Shortcode ","description":"A brief description of Hugo Shortcodes","id":18,"section":"posts","tags":["shortcodes","privacy"],"title":"Rich Content","uri":"http://localhost:1313/ja/posts/rich-content/"},{"content":"Code Syntax Highlighting Verify the following code blocks render as code blocks and highlight properly.\nMore about tuning syntax highlighting is the Hugo documentation.\nDiff 1 2 3 4 5 6 7 8 9 10 *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line *** /path/to/original\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; --- /path/to/new\t\u0026#39;\u0026#39;timestamp\u0026#39;\u0026#39; *************** *** 1 **** ! This is a line. --- 1 --- ! This is a replacement line. It is important to spell -removed line +new line Makefile CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I. 1 2 3 4 5 CC=gcc CFLAGS=-I. hellomake: hellomake.o hellofunc.o $(CC) -o hellomake hellomake.o hellofunc.o -I. JSON 1 2 3 {\u0026#34;employees\u0026#34;:[ {\u0026#34;firstName\u0026#34;:\u0026#34;John\u0026#34;, \u0026#34;lastName\u0026#34;:\u0026#34;Doe\u0026#34;}, ]} Markdown 1 2 3 **bold** *italics* [link](www.example.com) JavaScript 1 document.write(\u0026#39;Hello, world!\u0026#39;); CSS 1 2 3 body { background-color: red; } Objective C 1 2 3 4 5 6 #import \u0026lt;stdio.h\u0026gt; int main (void) { printf (\u0026#34;Hello world!\\n\u0026#34;); } Python 1 print \u0026#34;Hello, world!\u0026#34; XML 1 2 3 4 5 \u0026lt;employees\u0026gt; \u0026lt;employee\u0026gt; \u0026lt;firstName\u0026gt;John\u0026lt;/firstName\u0026gt; \u0026lt;lastName\u0026gt;Doe\u0026lt;/lastName\u0026gt; \u0026lt;/employee\u0026gt; \u0026lt;/employees\u0026gt; Perl 1 print \u0026#34;Hello, World!\\n\u0026#34;; Bash 1 echo \u0026#34;Hello World\u0026#34; PHP 1 \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hello World\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt; CoffeeScript 1 console.log(“Hello world!”); C# 1 2 3 4 5 6 7 8 using System; class Program { public static void Main(string[] args) { Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); } } C++ 1 2 3 4 5 6 7 #include \u0026lt;iostream.h\u0026gt; main() { cout \u0026lt;\u0026lt; \u0026#34;Hello World!\u0026#34;; return 0; } SQL 1 2 SELECT column_name,column_name FROM table_name; Go 1 2 3 4 5 package main import \u0026#34;fmt\u0026#34; func main() { fmt.Println(\u0026#34;Hello, 世界\u0026#34;) } Ruby 1 puts \u0026#34;Hello, world!\u0026#34; Java 1 2 3 4 5 6 7 8 9 10 11 12 import javax.swing.JFrame; //Importing class JFrame import javax.swing.JLabel; //Importing class JLabel public class HelloWorld { public static void main(String[] args) { JFrame frame = new JFrame(); //Creating frame frame.setTitle(\u0026#34;Hi!\u0026#34;); //Setting title frame frame.add(new JLabel(\u0026#34;Hello, world!\u0026#34;));//Adding text to frame frame.pack(); //Setting size to smallest frame.setLocationRelativeTo(null); //Centering frame frame.setVisible(true); //Showing frame } } Latex Equation 1 \\frac{d}{dx}\\left( \\int_{0}^{x} f(u)\\,du\\right)=f(x). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 import {x, y} as p from \u0026#39;point\u0026#39;; const ANSWER = 42; class Car extends Vehicle { constructor(speed, cost) { super(speed); var c = Symbol(\u0026#39;cost\u0026#39;); this[c] = cost; this.intro = `This is a car runs at ${speed}.`; } } for (let num of [1, 2, 3]) { console.log(num + 0b111110111); } function $initHighlight(block, flags) { try { if (block.className.search(/\\bno\\-highlight\\b/) != -1) return processBlock(block.function, true, 0x0F) + \u0026#39; class=\u0026#34;\u0026#34;\u0026#39;; } catch (e) { /* handle exception */ var e4x = \u0026lt;div\u0026gt;Example \u0026lt;p\u0026gt;1234\u0026lt;/p\u0026gt;\u0026lt;/div\u0026gt;; } for (var i = 0 / 2; i \u0026lt; classes.length; i++) { // \u0026#34;0 / 2\u0026#34; should not be parsed as regexp if (checkCondition(classes[i]) === undefined) return /\\d+[\\s/]/g; } console.log(Array.every(classes, Boolean)); } export $initHighlight; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Hello world\u0026lt;/title\u0026gt; \u0026lt;link href=\u0026#39;http://fonts.googleapis.com/css?family=Roboto:400,400italic,700,700italic\u0026#39; rel=\u0026#39;stylesheet\u0026#39; type=\u0026#39;text/css\u0026#39;\u0026gt; \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;index.css\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div id=\u0026#34;app\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;script src=\u0026#34;//cdnjs.cloudflare.com/ajax/libs/less.js/2.5.1/less.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;vendor/prism.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;examples.bundle.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 /********************************************************* * General */ pre[class*=\u0026#34;language-\u0026#34;], code { color: #5c6e74; font-size: 13px; text-shadow: none; font-family: Consolas, Monaco, \u0026#39;Andale Mono\u0026#39;, \u0026#39;Ubuntu Mono\u0026#39;, monospace; direction: ltr; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; line-height: 1.5; tab-size: 4; hyphens: none; } pre[class*=\u0026#34;language-\u0026#34;]::selection, code::selection { text-shadow: none; background: #b3d4fc; } @media print { pre[class*=\u0026#34;language-\u0026#34;], code { text-shadow: none; } } pre[class*=\u0026#34;language-\u0026#34;] { padding: 1em; margin: .5em 0; overflow: auto; background: #f8f5ec; } :not(pre) \u0026gt; code { padding: .1em .3em; border-radius: .3em; color: #db4c69; background: #f9f2f4; } ","description":"Syntax highlighting test","id":19,"section":"posts","tags":["hugo"],"title":"Syntax highlighting","uri":"http://localhost:1313/ja/posts/syntax-highlight/"},{"content":" We need goldmark katex entension which is not yet we have: [https://github.com/gohugoio/hugo/issues/6544](https://github.com/gohugoio/hugo/issues/6544) Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files. Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $$ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $$\nBlock math:\n$$\n\\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } }\n$$\n","description":"A brief guide to setup KaTeX","id":20,"section":"posts","tags":null,"title":"Math Typesetting","uri":"http://localhost:1313/ja/posts/math-typesetting/"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; } ","description":"Guide to emoji usage in Hugo","id":21,"section":"posts","tags":["emoji","gamoji","namoji","bamoji","amoji"],"title":"Emoji Support","uri":"http://localhost:1313/ja/posts/emoji-support/"},{"content":" digraph G { subgraph cluster_0 { style=filled; color=lightgrey; node [style=filled,color=white]; a0 -\u0026gt; a1 -\u0026gt; a2 -\u0026gt; a3; label = \u0026#34;process #1\u0026#34;; } subgraph cluster_1 { node [style=filled]; b0 -\u0026gt; b1 -\u0026gt; b2 -\u0026gt; b3; label = \u0026#34;process #2\u0026#34;; color=blue } start -\u0026gt; a0; start -\u0026gt; b0; a1 -\u0026gt; b3; b2 -\u0026gt; a3; a3 -\u0026gt; a0; a3 -\u0026gt; end; b3 -\u0026gt; end; start [shape=Mdiamond]; end [shape=Msquare]; } ","description":"A hack to put Graphviz on the web.","id":22,"section":"posts","tags":[null],"title":"Viz support","uri":"http://localhost:1313/ja/posts/test-viz/"},{"content":"{ \u0026#34;signal\u0026#34;: [ {\u0026#34;name\u0026#34;: \u0026#34;CLK\u0026#34;, \u0026#34;wave\u0026#34;: \u0026#34;p.....|...\u0026#34;}, {\u0026#34;name\u0026#34;:\u0026#34;DAT\u0026#34;, \u0026#34;wave\u0026#34;:\u0026#34;x.345x|=.x\u0026#34;, \u0026#34;data\u0026#34;:[\u0026#34;A\u0026#34;,\u0026#34;B\u0026#34;,\u0026#34;C\u0026#34;,\u0026#34;D\u0026#34;]}, {\u0026#34;name\u0026#34;: \u0026#34;REQ\u0026#34;, \u0026#34;wave\u0026#34;: \u0026#34;0.1..0|1.0\u0026#34;}, {}, {\u0026#34;name\u0026#34;: \u0026#34;ACK\u0026#34;, \u0026#34;wave\u0026#34;: \u0026#34;1.....|01.\u0026#34;} ]} ","description":"WaveDrom is a Free and Open Source online digital timing diagram (waveform) rendering engine that uses javascript, HTML5 and SVG to convert a WaveJSON input text description into SVG vector graphics.","id":23,"section":"posts","tags":[null],"title":"Wavedrom support","uri":"http://localhost:1313/ja/posts/test-wavedrom/"},{"content":"{ \u0026#34;type\u0026#34;: \u0026#34;bar\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;labels\u0026#34;: [\u0026#34;One\u0026#34;, \u0026#34;Two\u0026#34;, \u0026#34;Three\u0026#34;, \u0026#34;Four\u0026#34;, \u0026#34;Five\u0026#34;, \u0026#34;Six\u0026#34;], \u0026#34;datasets\u0026#34;: [{ \u0026#34;label\u0026#34;: \u0026#34;# of Votes\u0026#34;, \u0026#34;data\u0026#34;: [12, 19, 3, 5, 3, 8] }] } } { \u0026#34;type\u0026#34;: \u0026#34;line\u0026#34;, \u0026#34;data\u0026#34;: { \u0026#34;labels\u0026#34;: [\u0026#34;One\u0026#34;, \u0026#34;Two\u0026#34;, \u0026#34;Three\u0026#34;, \u0026#34;Four\u0026#34;, \u0026#34;Five\u0026#34;, \u0026#34;Six\u0026#34;], \u0026#34;datasets\u0026#34;: [ { \u0026#34;label\u0026#34;: \u0026#34;# of Votes\u0026#34;, \u0026#34;data\u0026#34;: [12, 19, 3, 5, 2, 3], \u0026#34;backgroundColor\u0026#34;:\u0026#34;transparent\u0026#34;, \u0026#34;borderColor\u0026#34;:\u0026#34;orange\u0026#34; }, { \u0026#34;label\u0026#34;: \u0026#34;Some other set\u0026#34;, \u0026#34;data\u0026#34;: [15, 8, 13, 5, 5, 9], \u0026#34;backgroundColor\u0026#34;:\u0026#34;transparent\u0026#34;, \u0026#34;borderColor\u0026#34;:\u0026#34;#44ccff\u0026#34; } ] } } ","description":"Simple yet flexible JavaScript charting for designers \u0026 developers","id":24,"section":"posts","tags":[null],"title":"Chart support","uri":"http://localhost:1313/ja/posts/test-chartjs/"},{"content":"Alice-\u0026gt;Bob: Hello Bob, how are you? Note right of Bob: Bob thinks Bob--\u0026gt;Alice: I am good thanks! Title: Here is a title A-\u0026gt;B: Normal line B--\u0026gt;C: Dashed line C-\u0026gt;\u0026gt;D: Open arrow D--\u0026gt;\u0026gt;A: Dashed open arrow ","description":"Generates UML sequence diagrams from simple text","id":25,"section":"posts","tags":[null],"title":"JS Sequence Diagram support","uri":"http://localhost:1313/ja/posts/test-js-sequence-diagrams/"},{"content":"graph TD; A--\u0026gt;B; A--\u0026gt;C; B--\u0026gt;D; C--\u0026gt;D; sequenceDiagram participant Alice participant Bob Alice-\u0026gt;John: Hello John, how are you? loop Healthcheck John-\u0026gt;John: Fight against hypochondria end Note right of John: Rational thoughts \u0026lt;br/\u0026gt;prevail... John--\u0026gt;Alice: Great! John-\u0026gt;Bob: How about you? Bob--\u0026gt;John: Jolly good! graph TD A[Hard] --\u0026gt;|Text| B(Round) B --\u0026gt; C{Decision} C --\u0026gt;|One| D[Result 1] C --\u0026gt;|Two| E[Result 2] gantt section Section Completed :done, des1, 2014-01-06,2014-01-08 Active :active, des2, 2014-01-07, 3d Parallel 1 : des3, after des1, 1d Parallel 2 : des4, after des1, 1d Parallel 3 : des5, after des3, 1d Parallel 4 : des6, after des4, 1d classDiagram Class01 \u0026lt;|-- AveryLongClass : Cool \u0026lt;\u0026lt;interface\u0026gt;\u0026gt; Class01 Class09 --\u0026gt; C2 : Where am i? Class09 --* C3 Class09 --|\u0026gt; Class07 Class07 : equals() Class07 : Object[] elementData Class01 : size() Class01 : int chimp Class01 : int gorilla class Class10 { \u0026lt;\u0026lt;service\u0026gt;\u0026gt; int id size() } stateDiagram [*] --\u0026gt; Still Still --\u0026gt; [*] Still --\u0026gt; Moving Moving --\u0026gt; Still Moving --\u0026gt; Crash Crash --\u0026gt; [*] pie \u0026#34;Dogs\u0026#34; : 386 \u0026#34;Cats\u0026#34; : 85 \u0026#34;Rats\u0026#34; : 15 ","description":"Generate diagrams, charts, graphs or flows from markdown-like text via javascript.","id":26,"section":"posts","tags":["diagram"],"title":"Mermaid support","uri":"http://localhost:1313/ja/posts/test-mermaid/"},{"content":"When $a \\ne 0$, there are two solutions to $(ax^2 + bx + c = 0)$ and they are\n$$x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.$$\n","description":"A JavaScript display engine for mathematics that works in all browsers.No more setup for readers. It just works.","id":27,"section":"posts","tags":[null],"title":"MathJax support","uri":"http://localhost:1313/ja/posts/test-mathjax/"},{"content":"The following\n$$ \\int_{a}^{b} x^2 dx $$\nIs an integral\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\nEnable Katex in the config file by setting the katex param to true. This will import the necessary Katex CSS/JS.\nSee the online reference of supported TeX functions.\nNote: For inline math to render correctly, your content file extension must be .mmark. See the official mmark site.\nInline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $ Inline math: $ \\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887… $\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$ Block math:\n$$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","description":"KaTeX is a fast, easy-to-use JavaScript library for TeX math rendering on the web.","id":28,"section":"posts","tags":[null],"title":"Katex support","uri":"http://localhost:1313/ja/posts/test-katex/"},{"content":"st=\u0026gt;start: Start|past:\u0026gt;http://www.google.com[blank] e=\u0026gt;end: End|future:\u0026gt;http://www.google.com op1=\u0026gt;operation: My Operation|past op2=\u0026gt;operation: Stuff|current sub1=\u0026gt;subroutine: My Subroutine|invalid cond=\u0026gt;condition: Yes or No?|approved:\u0026gt;http://www.google.com c2=\u0026gt;condition: Good idea|rejected io=\u0026gt;inputoutput: catch something...|future st-\u0026gt;op1(right)-\u0026gt;cond cond(yes, right)-\u0026gt;c2 cond(no)-\u0026gt;sub1(left)-\u0026gt;op1 c2(yes)-\u0026gt;io-\u0026gt;e c2(no)-\u0026gt;op2-\u0026gt;e ","description":"flowchart.js is a flowchart DSL and SVG render that runs in the browser and terminal. Nodes and connections are defined in separately so that nodes can be reused and connections can be quickly changed.","id":29,"section":"posts","tags":[null],"title":"Flowchart support","uri":"http://localhost:1313/ja/posts/test-flowchart/"},{"content":"コンテンツ 技術記事 技術系のコラム 本の感想 仕事系メモ がメインです。小さなアウトプットが多くなりそう。\nめっちゃ有益ならQiitaとかにも書くかも?\n個人的にはゴミ記事をQiitaにあげたくない派\n自己紹介 個人的 エンジニア ストレングスファインダー 個人的 名前 : ブシトラ\n年齢 : 平成6年生まれ29歳\n居住地 : 東京都\n趣味 : スマブラ/映画/マンガ/ジム/二郎or家系ラーメン/効率化系\n性格 : 献身的な殉教者\n前職 : 人材営業\n繊細な性格で、外交的にふるまえますが内向的な性格です！\nエンジニア 技術 : Rails/Ruby メイン\n歴 : 2020/04 ~\n勉強中 : アルゴリズム/TypeScript\nフロントもインフラもクソザコナメクジなのでなんとかしないと、、\nブシトラのストレングスファインダー 3行でそれぞれまとめます。\n177問やっただけあって結構あってた。\nドラクエでいうと、役職は賢者感ある。\n1.回復志向 ・問題を解決するのが大好き。問題をどこにあるか探して、解決することに長けている。\n・物事に再び生命を与えることを楽しんでいる。\n・自分に厳しすぎることがあるので休息が多めに必要。\n2.調和性 ・衝突や摩擦から得られるものより、共通点を探しだし全員が賛同させる内容へと調和に向かわせ意見の一致を探る。\n・日常的に人と対立する職種は向いていない。ディスカッションは好きだが、論争は好まない。\n・生まれながらの現実主義者\n3.分析思考 ・物事の理由と原因を追求する。状況に影響を与える可能性のあるすべの要素を考慮に入れる能力を備えている。\n・データを好み、理論が強固かどうかを求め、データからパターンと関連性を見つけだす。\n・裏付けがないと少し行動に出にくい。\n4.個別化 ・一人一人が持つユニークな個性に興味をひかれる。異なるタイプの人たちの集団をまとめ、生産性の高いチームを作ることに長けている。\n・本能的に、人の性格、動機、考え方、関係の築き方、孤独、苦境、試練などを観察し感じ取っている。\n・観察眼があるが、注意をむけすぎて疲れやすい。\n5.規律性 ・日課や秩序正しい計画に従うことを好む。世界は自分が作った秩序の中に存在する。\n・本能的に、 物事の概要が示されているか構造化されている環境で働く方が好き(らしい)\n・規律を求むので、急激な変化に対応するのが苦手(自分調べ)\nその他 このブログは、Amazon.co.jpを宣伝しリンクすることによってサイトが紹介料を獲得できる手段を提供することを目的に設定されたアフィリエイトプログラムである、Amazonアソシエイト・プログラムの参加者です。\n","description":"このブログについて","id":31,"section":"","tags":null,"title":"About","uri":"http://localhost:1313/ja/about/"}]